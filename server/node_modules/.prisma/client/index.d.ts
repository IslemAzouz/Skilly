
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: number
  uid: string
  name: string
  email: string
  address: string
  profileImage: string | null
  budge: string | null
  points: number
  age: number
  skills: string[]
  hobbies: string[]
  details: string | null
  descriptions: string | null
  phoneNumber: string | null
  gender: string | null
  level: number
  createdAt: Date
  isBanned: boolean
  isAdmin: boolean
}

/**
 * Model Card
 * 
 */
export type Card = {
  id: number
  last4: string
  brand: string
  expiration: string
  paymentMethodId: string | null
  userId: number
}

/**
 * Model Pack
 * 
 */
export type Pack = {
  id: number
  name: string
  points: number
  price: number
}

/**
 * Model Community
 * 
 */
export type Community = {
  id: number
  name: string
  skill: string
}

/**
 * Model Post
 * 
 */
export type Post = {
  id: number
  image: string
  title: string
  skill: string
  desc: string
  likes: number
  userId: number
}

/**
 * Model Comment
 * 
 */
export type Comment = {
  id: number
  text: string
  postId: number
  userId: number
}

/**
 * Model Review
 * 
 */
export type Review = {
  id: number
  rating: number
  postId: number
  userId: number
}

/**
 * Model Friendship
 * 
 */
export type Friendship = {
  id: number
  requestorId: number
  respondentId: number
  status: FriendshipStatus
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Membership
 * 
 */
export type Membership = {
  id: number
  userId: number
  communityId: number
  isAdmin: boolean
  isAccepted: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model PostM
 * 
 */
export type PostM = {
  id: number
  title: string
  price: number
  image: string[]
  description: string
  skill: string
  userId: number
}

/**
 * Model ReviewM
 * 
 */
export type ReviewM = {
  id: number
  comment: string
  rating: number
  postId: number
  userId: number
}

/**
 * Model Country
 * 
 */
export type Country = {
  id: number
  name: string
}


/**
 * Enums
 */

export const FriendshipStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED'
};

export type FriendshipStatus = (typeof FriendshipStatus)[keyof typeof FriendshipStatus]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.card`: Exposes CRUD operations for the **Card** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cards
    * const cards = await prisma.card.findMany()
    * ```
    */
  get card(): Prisma.CardDelegate<GlobalReject>;

  /**
   * `prisma.pack`: Exposes CRUD operations for the **Pack** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Packs
    * const packs = await prisma.pack.findMany()
    * ```
    */
  get pack(): Prisma.PackDelegate<GlobalReject>;

  /**
   * `prisma.community`: Exposes CRUD operations for the **Community** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Communities
    * const communities = await prisma.community.findMany()
    * ```
    */
  get community(): Prisma.CommunityDelegate<GlobalReject>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<GlobalReject>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<GlobalReject>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<GlobalReject>;

  /**
   * `prisma.friendship`: Exposes CRUD operations for the **Friendship** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Friendships
    * const friendships = await prisma.friendship.findMany()
    * ```
    */
  get friendship(): Prisma.FriendshipDelegate<GlobalReject>;

  /**
   * `prisma.membership`: Exposes CRUD operations for the **Membership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Memberships
    * const memberships = await prisma.membership.findMany()
    * ```
    */
  get membership(): Prisma.MembershipDelegate<GlobalReject>;

  /**
   * `prisma.postM`: Exposes CRUD operations for the **PostM** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostMS
    * const postMS = await prisma.postM.findMany()
    * ```
    */
  get postM(): Prisma.PostMDelegate<GlobalReject>;

  /**
   * `prisma.reviewM`: Exposes CRUD operations for the **ReviewM** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReviewMS
    * const reviewMS = await prisma.reviewM.findMany()
    * ```
    */
  get reviewM(): Prisma.ReviewMDelegate<GlobalReject>;

  /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.CountryDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Card: 'Card',
    Pack: 'Pack',
    Community: 'Community',
    Post: 'Post',
    Comment: 'Comment',
    Review: 'Review',
    Friendship: 'Friendship',
    Membership: 'Membership',
    PostM: 'PostM',
    ReviewM: 'ReviewM',
    Country: 'Country'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    cards: number
    sentRequests: number
    receivedRequests: number
    posts: number
    comments: number
    reviews: number
    memberships: number
    PostM: number
    ReviewM: number
  }

  export type UserCountOutputTypeSelect = {
    cards?: boolean
    sentRequests?: boolean
    receivedRequests?: boolean
    posts?: boolean
    comments?: boolean
    reviews?: boolean
    memberships?: boolean
    PostM?: boolean
    ReviewM?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type CommunityCountOutputType
   */


  export type CommunityCountOutputType = {
    memberships: number
  }

  export type CommunityCountOutputTypeSelect = {
    memberships?: boolean
  }

  export type CommunityCountOutputTypeGetPayload<S extends boolean | null | undefined | CommunityCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CommunityCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CommunityCountOutputTypeArgs)
    ? CommunityCountOutputType 
    : S extends { select: any } & (CommunityCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CommunityCountOutputType ? CommunityCountOutputType[P] : never
  } 
      : CommunityCountOutputType




  // Custom InputTypes

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CommunityCountOutputType
     */
    select?: CommunityCountOutputTypeSelect | null
  }



  /**
   * Count Type PostCountOutputType
   */


  export type PostCountOutputType = {
    comments: number
    reviews: number
  }

  export type PostCountOutputTypeSelect = {
    comments?: boolean
    reviews?: boolean
  }

  export type PostCountOutputTypeGetPayload<S extends boolean | null | undefined | PostCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PostCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PostCountOutputTypeArgs)
    ? PostCountOutputType 
    : S extends { select: any } & (PostCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PostCountOutputType ? PostCountOutputType[P] : never
  } 
      : PostCountOutputType




  // Custom InputTypes

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect | null
  }



  /**
   * Count Type PostMCountOutputType
   */


  export type PostMCountOutputType = {
    reviews: number
  }

  export type PostMCountOutputTypeSelect = {
    reviews?: boolean
  }

  export type PostMCountOutputTypeGetPayload<S extends boolean | null | undefined | PostMCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PostMCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PostMCountOutputTypeArgs)
    ? PostMCountOutputType 
    : S extends { select: any } & (PostMCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PostMCountOutputType ? PostMCountOutputType[P] : never
  } 
      : PostMCountOutputType




  // Custom InputTypes

  /**
   * PostMCountOutputType without action
   */
  export type PostMCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PostMCountOutputType
     */
    select?: PostMCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    points: number | null
    age: number | null
    level: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    points: number | null
    age: number | null
    level: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    uid: string | null
    name: string | null
    email: string | null
    address: string | null
    profileImage: string | null
    budge: string | null
    points: number | null
    age: number | null
    details: string | null
    descriptions: string | null
    phoneNumber: string | null
    gender: string | null
    level: number | null
    createdAt: Date | null
    isBanned: boolean | null
    isAdmin: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    uid: string | null
    name: string | null
    email: string | null
    address: string | null
    profileImage: string | null
    budge: string | null
    points: number | null
    age: number | null
    details: string | null
    descriptions: string | null
    phoneNumber: string | null
    gender: string | null
    level: number | null
    createdAt: Date | null
    isBanned: boolean | null
    isAdmin: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    uid: number
    name: number
    email: number
    address: number
    profileImage: number
    budge: number
    points: number
    age: number
    skills: number
    hobbies: number
    details: number
    descriptions: number
    phoneNumber: number
    gender: number
    level: number
    createdAt: number
    isBanned: number
    isAdmin: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    points?: true
    age?: true
    level?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    points?: true
    age?: true
    level?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    uid?: true
    name?: true
    email?: true
    address?: true
    profileImage?: true
    budge?: true
    points?: true
    age?: true
    details?: true
    descriptions?: true
    phoneNumber?: true
    gender?: true
    level?: true
    createdAt?: true
    isBanned?: true
    isAdmin?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    uid?: true
    name?: true
    email?: true
    address?: true
    profileImage?: true
    budge?: true
    points?: true
    age?: true
    details?: true
    descriptions?: true
    phoneNumber?: true
    gender?: true
    level?: true
    createdAt?: true
    isBanned?: true
    isAdmin?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    uid?: true
    name?: true
    email?: true
    address?: true
    profileImage?: true
    budge?: true
    points?: true
    age?: true
    skills?: true
    hobbies?: true
    details?: true
    descriptions?: true
    phoneNumber?: true
    gender?: true
    level?: true
    createdAt?: true
    isBanned?: true
    isAdmin?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    uid: string
    name: string
    email: string
    address: string
    profileImage: string | null
    budge: string | null
    points: number
    age: number
    skills: string[]
    hobbies: string[]
    details: string | null
    descriptions: string | null
    phoneNumber: string | null
    gender: string | null
    level: number
    createdAt: Date
    isBanned: boolean
    isAdmin: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    uid?: boolean
    name?: boolean
    email?: boolean
    address?: boolean
    profileImage?: boolean
    budge?: boolean
    points?: boolean
    age?: boolean
    skills?: boolean
    hobbies?: boolean
    details?: boolean
    descriptions?: boolean
    phoneNumber?: boolean
    gender?: boolean
    level?: boolean
    createdAt?: boolean
    isBanned?: boolean
    isAdmin?: boolean
    cards?: boolean | User$cardsArgs
    sentRequests?: boolean | User$sentRequestsArgs
    receivedRequests?: boolean | User$receivedRequestsArgs
    posts?: boolean | User$postsArgs
    comments?: boolean | User$commentsArgs
    reviews?: boolean | User$reviewsArgs
    memberships?: boolean | User$membershipsArgs
    PostM?: boolean | User$PostMArgs
    ReviewM?: boolean | User$ReviewMArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    cards?: boolean | User$cardsArgs
    sentRequests?: boolean | User$sentRequestsArgs
    receivedRequests?: boolean | User$receivedRequestsArgs
    posts?: boolean | User$postsArgs
    comments?: boolean | User$commentsArgs
    reviews?: boolean | User$reviewsArgs
    memberships?: boolean | User$membershipsArgs
    PostM?: boolean | User$PostMArgs
    ReviewM?: boolean | User$ReviewMArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'cards' ? Array < CardGetPayload<S['include'][P]>>  :
        P extends 'sentRequests' ? Array < FriendshipGetPayload<S['include'][P]>>  :
        P extends 'receivedRequests' ? Array < FriendshipGetPayload<S['include'][P]>>  :
        P extends 'posts' ? Array < PostGetPayload<S['include'][P]>>  :
        P extends 'comments' ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends 'reviews' ? Array < ReviewGetPayload<S['include'][P]>>  :
        P extends 'memberships' ? Array < MembershipGetPayload<S['include'][P]>>  :
        P extends 'PostM' ? Array < PostMGetPayload<S['include'][P]>>  :
        P extends 'ReviewM' ? Array < ReviewMGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'cards' ? Array < CardGetPayload<S['select'][P]>>  :
        P extends 'sentRequests' ? Array < FriendshipGetPayload<S['select'][P]>>  :
        P extends 'receivedRequests' ? Array < FriendshipGetPayload<S['select'][P]>>  :
        P extends 'posts' ? Array < PostGetPayload<S['select'][P]>>  :
        P extends 'comments' ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends 'reviews' ? Array < ReviewGetPayload<S['select'][P]>>  :
        P extends 'memberships' ? Array < MembershipGetPayload<S['select'][P]>>  :
        P extends 'PostM' ? Array < PostMGetPayload<S['select'][P]>>  :
        P extends 'ReviewM' ? Array < ReviewMGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    cards<T extends User$cardsArgs= {}>(args?: Subset<T, User$cardsArgs>): Prisma.PrismaPromise<Array<CardGetPayload<T>>| Null>;

    sentRequests<T extends User$sentRequestsArgs= {}>(args?: Subset<T, User$sentRequestsArgs>): Prisma.PrismaPromise<Array<FriendshipGetPayload<T>>| Null>;

    receivedRequests<T extends User$receivedRequestsArgs= {}>(args?: Subset<T, User$receivedRequestsArgs>): Prisma.PrismaPromise<Array<FriendshipGetPayload<T>>| Null>;

    posts<T extends User$postsArgs= {}>(args?: Subset<T, User$postsArgs>): Prisma.PrismaPromise<Array<PostGetPayload<T>>| Null>;

    comments<T extends User$commentsArgs= {}>(args?: Subset<T, User$commentsArgs>): Prisma.PrismaPromise<Array<CommentGetPayload<T>>| Null>;

    reviews<T extends User$reviewsArgs= {}>(args?: Subset<T, User$reviewsArgs>): Prisma.PrismaPromise<Array<ReviewGetPayload<T>>| Null>;

    memberships<T extends User$membershipsArgs= {}>(args?: Subset<T, User$membershipsArgs>): Prisma.PrismaPromise<Array<MembershipGetPayload<T>>| Null>;

    PostM<T extends User$PostMArgs= {}>(args?: Subset<T, User$PostMArgs>): Prisma.PrismaPromise<Array<PostMGetPayload<T>>| Null>;

    ReviewM<T extends User$ReviewMArgs= {}>(args?: Subset<T, User$ReviewMArgs>): Prisma.PrismaPromise<Array<ReviewMGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.cards
   */
  export type User$cardsArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    where?: CardWhereInput
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    cursor?: CardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CardScalarFieldEnum>
  }


  /**
   * User.sentRequests
   */
  export type User$sentRequestsArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    where?: FriendshipWhereInput
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    cursor?: FriendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }


  /**
   * User.receivedRequests
   */
  export type User$receivedRequestsArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    where?: FriendshipWhereInput
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    cursor?: FriendshipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }


  /**
   * User.posts
   */
  export type User$postsArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * User.comments
   */
  export type User$commentsArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * User.reviews
   */
  export type User$reviewsArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    where?: ReviewWhereInput
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }


  /**
   * User.memberships
   */
  export type User$membershipsArgs = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembershipInclude | null
    where?: MembershipWhereInput
    orderBy?: Enumerable<MembershipOrderByWithRelationInput>
    cursor?: MembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }


  /**
   * User.PostM
   */
  export type User$PostMArgs = {
    /**
     * Select specific fields to fetch from the PostM
     */
    select?: PostMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostMInclude | null
    where?: PostMWhereInput
    orderBy?: Enumerable<PostMOrderByWithRelationInput>
    cursor?: PostMWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostMScalarFieldEnum>
  }


  /**
   * User.ReviewM
   */
  export type User$ReviewMArgs = {
    /**
     * Select specific fields to fetch from the ReviewM
     */
    select?: ReviewMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewMInclude | null
    where?: ReviewMWhereInput
    orderBy?: Enumerable<ReviewMOrderByWithRelationInput>
    cursor?: ReviewMWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReviewMScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Card
   */


  export type AggregateCard = {
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  export type CardAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CardSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type CardMinAggregateOutputType = {
    id: number | null
    last4: string | null
    brand: string | null
    expiration: string | null
    paymentMethodId: string | null
    userId: number | null
  }

  export type CardMaxAggregateOutputType = {
    id: number | null
    last4: string | null
    brand: string | null
    expiration: string | null
    paymentMethodId: string | null
    userId: number | null
  }

  export type CardCountAggregateOutputType = {
    id: number
    last4: number
    brand: number
    expiration: number
    paymentMethodId: number
    userId: number
    _all: number
  }


  export type CardAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CardSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CardMinAggregateInputType = {
    id?: true
    last4?: true
    brand?: true
    expiration?: true
    paymentMethodId?: true
    userId?: true
  }

  export type CardMaxAggregateInputType = {
    id?: true
    last4?: true
    brand?: true
    expiration?: true
    paymentMethodId?: true
    userId?: true
  }

  export type CardCountAggregateInputType = {
    id?: true
    last4?: true
    brand?: true
    expiration?: true
    paymentMethodId?: true
    userId?: true
    _all?: true
  }

  export type CardAggregateArgs = {
    /**
     * Filter which Card to aggregate.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cards
    **/
    _count?: true | CardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardMaxAggregateInputType
  }

  export type GetCardAggregateType<T extends CardAggregateArgs> = {
        [P in keyof T & keyof AggregateCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCard[P]>
      : GetScalarType<T[P], AggregateCard[P]>
  }




  export type CardGroupByArgs = {
    where?: CardWhereInput
    orderBy?: Enumerable<CardOrderByWithAggregationInput>
    by: CardScalarFieldEnum[]
    having?: CardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardCountAggregateInputType | true
    _avg?: CardAvgAggregateInputType
    _sum?: CardSumAggregateInputType
    _min?: CardMinAggregateInputType
    _max?: CardMaxAggregateInputType
  }


  export type CardGroupByOutputType = {
    id: number
    last4: string
    brand: string
    expiration: string
    paymentMethodId: string | null
    userId: number
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  type GetCardGroupByPayload<T extends CardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardGroupByOutputType[P]>
            : GetScalarType<T[P], CardGroupByOutputType[P]>
        }
      >
    >


  export type CardSelect = {
    id?: boolean
    last4?: boolean
    brand?: boolean
    expiration?: boolean
    paymentMethodId?: boolean
    userId?: boolean
    user?: boolean | UserArgs
  }


  export type CardInclude = {
    user?: boolean | UserArgs
  }

  export type CardGetPayload<S extends boolean | null | undefined | CardArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Card :
    S extends undefined ? never :
    S extends { include: any } & (CardArgs | CardFindManyArgs)
    ? Card  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CardArgs | CardFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Card ? Card[P] : never
  } 
      : Card


  type CardCountArgs = 
    Omit<CardFindManyArgs, 'select' | 'include'> & {
      select?: CardCountAggregateInputType | true
    }

  export interface CardDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Card that matches the filter.
     * @param {CardFindUniqueArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CardFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CardFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Card'> extends True ? Prisma__CardClient<CardGetPayload<T>> : Prisma__CardClient<CardGetPayload<T> | null, null>

    /**
     * Find one Card that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CardFindUniqueOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CardFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CardFindUniqueOrThrowArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Find the first Card that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CardFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CardFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Card'> extends True ? Prisma__CardClient<CardGetPayload<T>> : Prisma__CardClient<CardGetPayload<T> | null, null>

    /**
     * Find the first Card that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CardFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CardFindFirstOrThrowArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Find zero or more Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cards
     * const cards = await prisma.card.findMany()
     * 
     * // Get first 10 Cards
     * const cards = await prisma.card.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardWithIdOnly = await prisma.card.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CardFindManyArgs>(
      args?: SelectSubset<T, CardFindManyArgs>
    ): Prisma.PrismaPromise<Array<CardGetPayload<T>>>

    /**
     * Create a Card.
     * @param {CardCreateArgs} args - Arguments to create a Card.
     * @example
     * // Create one Card
     * const Card = await prisma.card.create({
     *   data: {
     *     // ... data to create a Card
     *   }
     * })
     * 
    **/
    create<T extends CardCreateArgs>(
      args: SelectSubset<T, CardCreateArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Create many Cards.
     *     @param {CardCreateManyArgs} args - Arguments to create many Cards.
     *     @example
     *     // Create many Cards
     *     const card = await prisma.card.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CardCreateManyArgs>(
      args?: SelectSubset<T, CardCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Card.
     * @param {CardDeleteArgs} args - Arguments to delete one Card.
     * @example
     * // Delete one Card
     * const Card = await prisma.card.delete({
     *   where: {
     *     // ... filter to delete one Card
     *   }
     * })
     * 
    **/
    delete<T extends CardDeleteArgs>(
      args: SelectSubset<T, CardDeleteArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Update one Card.
     * @param {CardUpdateArgs} args - Arguments to update one Card.
     * @example
     * // Update one Card
     * const card = await prisma.card.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CardUpdateArgs>(
      args: SelectSubset<T, CardUpdateArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Delete zero or more Cards.
     * @param {CardDeleteManyArgs} args - Arguments to filter Cards to delete.
     * @example
     * // Delete a few Cards
     * const { count } = await prisma.card.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CardDeleteManyArgs>(
      args?: SelectSubset<T, CardDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cards
     * const card = await prisma.card.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CardUpdateManyArgs>(
      args: SelectSubset<T, CardUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Card.
     * @param {CardUpsertArgs} args - Arguments to update or create a Card.
     * @example
     * // Update or create a Card
     * const card = await prisma.card.upsert({
     *   create: {
     *     // ... data to create a Card
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Card we want to update
     *   }
     * })
    **/
    upsert<T extends CardUpsertArgs>(
      args: SelectSubset<T, CardUpsertArgs>
    ): Prisma__CardClient<CardGetPayload<T>>

    /**
     * Count the number of Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardCountArgs} args - Arguments to filter Cards to count.
     * @example
     * // Count the number of Cards
     * const count = await prisma.card.count({
     *   where: {
     *     // ... the filter for the Cards we want to count
     *   }
     * })
    **/
    count<T extends CardCountArgs>(
      args?: Subset<T, CardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardAggregateArgs>(args: Subset<T, CardAggregateArgs>): Prisma.PrismaPromise<GetCardAggregateType<T>>

    /**
     * Group by Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardGroupByArgs['orderBy'] }
        : { orderBy?: CardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Card.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CardClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Card base type for findUnique actions
   */
  export type CardFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card findUnique
   */
  export interface CardFindUniqueArgs extends CardFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Card findUniqueOrThrow
   */
  export type CardFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }


  /**
   * Card base type for findFirst actions
   */
  export type CardFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: Enumerable<CardScalarFieldEnum>
  }

  /**
   * Card findFirst
   */
  export interface CardFindFirstArgs extends CardFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Card findFirstOrThrow
   */
  export type CardFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: Enumerable<CardScalarFieldEnum>
  }


  /**
   * Card findMany
   */
  export type CardFindManyArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter, which Cards to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: Enumerable<CardOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    distinct?: Enumerable<CardScalarFieldEnum>
  }


  /**
   * Card create
   */
  export type CardCreateArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * The data needed to create a Card.
     */
    data: XOR<CardCreateInput, CardUncheckedCreateInput>
  }


  /**
   * Card createMany
   */
  export type CardCreateManyArgs = {
    /**
     * The data used to create many Cards.
     */
    data: Enumerable<CardCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Card update
   */
  export type CardUpdateArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * The data needed to update a Card.
     */
    data: XOR<CardUpdateInput, CardUncheckedUpdateInput>
    /**
     * Choose, which Card to update.
     */
    where: CardWhereUniqueInput
  }


  /**
   * Card updateMany
   */
  export type CardUpdateManyArgs = {
    /**
     * The data used to update Cards.
     */
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyInput>
    /**
     * Filter which Cards to update
     */
    where?: CardWhereInput
  }


  /**
   * Card upsert
   */
  export type CardUpsertArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * The filter to search for the Card to update in case it exists.
     */
    where: CardWhereUniqueInput
    /**
     * In case the Card found by the `where` argument doesn't exist, create a new Card with this data.
     */
    create: XOR<CardCreateInput, CardUncheckedCreateInput>
    /**
     * In case the Card was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardUpdateInput, CardUncheckedUpdateInput>
  }


  /**
   * Card delete
   */
  export type CardDeleteArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
    /**
     * Filter which Card to delete.
     */
    where: CardWhereUniqueInput
  }


  /**
   * Card deleteMany
   */
  export type CardDeleteManyArgs = {
    /**
     * Filter which Cards to delete
     */
    where?: CardWhereInput
  }


  /**
   * Card without action
   */
  export type CardArgs = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CardInclude | null
  }



  /**
   * Model Pack
   */


  export type AggregatePack = {
    _count: PackCountAggregateOutputType | null
    _avg: PackAvgAggregateOutputType | null
    _sum: PackSumAggregateOutputType | null
    _min: PackMinAggregateOutputType | null
    _max: PackMaxAggregateOutputType | null
  }

  export type PackAvgAggregateOutputType = {
    id: number | null
    points: number | null
    price: number | null
  }

  export type PackSumAggregateOutputType = {
    id: number | null
    points: number | null
    price: number | null
  }

  export type PackMinAggregateOutputType = {
    id: number | null
    name: string | null
    points: number | null
    price: number | null
  }

  export type PackMaxAggregateOutputType = {
    id: number | null
    name: string | null
    points: number | null
    price: number | null
  }

  export type PackCountAggregateOutputType = {
    id: number
    name: number
    points: number
    price: number
    _all: number
  }


  export type PackAvgAggregateInputType = {
    id?: true
    points?: true
    price?: true
  }

  export type PackSumAggregateInputType = {
    id?: true
    points?: true
    price?: true
  }

  export type PackMinAggregateInputType = {
    id?: true
    name?: true
    points?: true
    price?: true
  }

  export type PackMaxAggregateInputType = {
    id?: true
    name?: true
    points?: true
    price?: true
  }

  export type PackCountAggregateInputType = {
    id?: true
    name?: true
    points?: true
    price?: true
    _all?: true
  }

  export type PackAggregateArgs = {
    /**
     * Filter which Pack to aggregate.
     */
    where?: PackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packs to fetch.
     */
    orderBy?: Enumerable<PackOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Packs
    **/
    _count?: true | PackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackMaxAggregateInputType
  }

  export type GetPackAggregateType<T extends PackAggregateArgs> = {
        [P in keyof T & keyof AggregatePack]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePack[P]>
      : GetScalarType<T[P], AggregatePack[P]>
  }




  export type PackGroupByArgs = {
    where?: PackWhereInput
    orderBy?: Enumerable<PackOrderByWithAggregationInput>
    by: PackScalarFieldEnum[]
    having?: PackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackCountAggregateInputType | true
    _avg?: PackAvgAggregateInputType
    _sum?: PackSumAggregateInputType
    _min?: PackMinAggregateInputType
    _max?: PackMaxAggregateInputType
  }


  export type PackGroupByOutputType = {
    id: number
    name: string
    points: number
    price: number
    _count: PackCountAggregateOutputType | null
    _avg: PackAvgAggregateOutputType | null
    _sum: PackSumAggregateOutputType | null
    _min: PackMinAggregateOutputType | null
    _max: PackMaxAggregateOutputType | null
  }

  type GetPackGroupByPayload<T extends PackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackGroupByOutputType[P]>
            : GetScalarType<T[P], PackGroupByOutputType[P]>
        }
      >
    >


  export type PackSelect = {
    id?: boolean
    name?: boolean
    points?: boolean
    price?: boolean
  }


  export type PackGetPayload<S extends boolean | null | undefined | PackArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Pack :
    S extends undefined ? never :
    S extends { include: any } & (PackArgs | PackFindManyArgs)
    ? Pack 
    : S extends { select: any } & (PackArgs | PackFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Pack ? Pack[P] : never
  } 
      : Pack


  type PackCountArgs = 
    Omit<PackFindManyArgs, 'select' | 'include'> & {
      select?: PackCountAggregateInputType | true
    }

  export interface PackDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Pack that matches the filter.
     * @param {PackFindUniqueArgs} args - Arguments to find a Pack
     * @example
     * // Get one Pack
     * const pack = await prisma.pack.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PackFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PackFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Pack'> extends True ? Prisma__PackClient<PackGetPayload<T>> : Prisma__PackClient<PackGetPayload<T> | null, null>

    /**
     * Find one Pack that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PackFindUniqueOrThrowArgs} args - Arguments to find a Pack
     * @example
     * // Get one Pack
     * const pack = await prisma.pack.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PackFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PackFindUniqueOrThrowArgs>
    ): Prisma__PackClient<PackGetPayload<T>>

    /**
     * Find the first Pack that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackFindFirstArgs} args - Arguments to find a Pack
     * @example
     * // Get one Pack
     * const pack = await prisma.pack.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PackFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PackFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Pack'> extends True ? Prisma__PackClient<PackGetPayload<T>> : Prisma__PackClient<PackGetPayload<T> | null, null>

    /**
     * Find the first Pack that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackFindFirstOrThrowArgs} args - Arguments to find a Pack
     * @example
     * // Get one Pack
     * const pack = await prisma.pack.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PackFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PackFindFirstOrThrowArgs>
    ): Prisma__PackClient<PackGetPayload<T>>

    /**
     * Find zero or more Packs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Packs
     * const packs = await prisma.pack.findMany()
     * 
     * // Get first 10 Packs
     * const packs = await prisma.pack.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packWithIdOnly = await prisma.pack.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PackFindManyArgs>(
      args?: SelectSubset<T, PackFindManyArgs>
    ): Prisma.PrismaPromise<Array<PackGetPayload<T>>>

    /**
     * Create a Pack.
     * @param {PackCreateArgs} args - Arguments to create a Pack.
     * @example
     * // Create one Pack
     * const Pack = await prisma.pack.create({
     *   data: {
     *     // ... data to create a Pack
     *   }
     * })
     * 
    **/
    create<T extends PackCreateArgs>(
      args: SelectSubset<T, PackCreateArgs>
    ): Prisma__PackClient<PackGetPayload<T>>

    /**
     * Create many Packs.
     *     @param {PackCreateManyArgs} args - Arguments to create many Packs.
     *     @example
     *     // Create many Packs
     *     const pack = await prisma.pack.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PackCreateManyArgs>(
      args?: SelectSubset<T, PackCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pack.
     * @param {PackDeleteArgs} args - Arguments to delete one Pack.
     * @example
     * // Delete one Pack
     * const Pack = await prisma.pack.delete({
     *   where: {
     *     // ... filter to delete one Pack
     *   }
     * })
     * 
    **/
    delete<T extends PackDeleteArgs>(
      args: SelectSubset<T, PackDeleteArgs>
    ): Prisma__PackClient<PackGetPayload<T>>

    /**
     * Update one Pack.
     * @param {PackUpdateArgs} args - Arguments to update one Pack.
     * @example
     * // Update one Pack
     * const pack = await prisma.pack.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PackUpdateArgs>(
      args: SelectSubset<T, PackUpdateArgs>
    ): Prisma__PackClient<PackGetPayload<T>>

    /**
     * Delete zero or more Packs.
     * @param {PackDeleteManyArgs} args - Arguments to filter Packs to delete.
     * @example
     * // Delete a few Packs
     * const { count } = await prisma.pack.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PackDeleteManyArgs>(
      args?: SelectSubset<T, PackDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Packs
     * const pack = await prisma.pack.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PackUpdateManyArgs>(
      args: SelectSubset<T, PackUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pack.
     * @param {PackUpsertArgs} args - Arguments to update or create a Pack.
     * @example
     * // Update or create a Pack
     * const pack = await prisma.pack.upsert({
     *   create: {
     *     // ... data to create a Pack
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pack we want to update
     *   }
     * })
    **/
    upsert<T extends PackUpsertArgs>(
      args: SelectSubset<T, PackUpsertArgs>
    ): Prisma__PackClient<PackGetPayload<T>>

    /**
     * Count the number of Packs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackCountArgs} args - Arguments to filter Packs to count.
     * @example
     * // Count the number of Packs
     * const count = await prisma.pack.count({
     *   where: {
     *     // ... the filter for the Packs we want to count
     *   }
     * })
    **/
    count<T extends PackCountArgs>(
      args?: Subset<T, PackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pack.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackAggregateArgs>(args: Subset<T, PackAggregateArgs>): Prisma.PrismaPromise<GetPackAggregateType<T>>

    /**
     * Group by Pack.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackGroupByArgs['orderBy'] }
        : { orderBy?: PackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Pack.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PackClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Pack base type for findUnique actions
   */
  export type PackFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect | null
    /**
     * Filter, which Pack to fetch.
     */
    where: PackWhereUniqueInput
  }

  /**
   * Pack findUnique
   */
  export interface PackFindUniqueArgs extends PackFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pack findUniqueOrThrow
   */
  export type PackFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect | null
    /**
     * Filter, which Pack to fetch.
     */
    where: PackWhereUniqueInput
  }


  /**
   * Pack base type for findFirst actions
   */
  export type PackFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect | null
    /**
     * Filter, which Pack to fetch.
     */
    where?: PackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packs to fetch.
     */
    orderBy?: Enumerable<PackOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packs.
     */
    cursor?: PackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packs.
     */
    distinct?: Enumerable<PackScalarFieldEnum>
  }

  /**
   * Pack findFirst
   */
  export interface PackFindFirstArgs extends PackFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Pack findFirstOrThrow
   */
  export type PackFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect | null
    /**
     * Filter, which Pack to fetch.
     */
    where?: PackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packs to fetch.
     */
    orderBy?: Enumerable<PackOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packs.
     */
    cursor?: PackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packs.
     */
    distinct?: Enumerable<PackScalarFieldEnum>
  }


  /**
   * Pack findMany
   */
  export type PackFindManyArgs = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect | null
    /**
     * Filter, which Packs to fetch.
     */
    where?: PackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packs to fetch.
     */
    orderBy?: Enumerable<PackOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Packs.
     */
    cursor?: PackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packs.
     */
    skip?: number
    distinct?: Enumerable<PackScalarFieldEnum>
  }


  /**
   * Pack create
   */
  export type PackCreateArgs = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect | null
    /**
     * The data needed to create a Pack.
     */
    data: XOR<PackCreateInput, PackUncheckedCreateInput>
  }


  /**
   * Pack createMany
   */
  export type PackCreateManyArgs = {
    /**
     * The data used to create many Packs.
     */
    data: Enumerable<PackCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Pack update
   */
  export type PackUpdateArgs = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect | null
    /**
     * The data needed to update a Pack.
     */
    data: XOR<PackUpdateInput, PackUncheckedUpdateInput>
    /**
     * Choose, which Pack to update.
     */
    where: PackWhereUniqueInput
  }


  /**
   * Pack updateMany
   */
  export type PackUpdateManyArgs = {
    /**
     * The data used to update Packs.
     */
    data: XOR<PackUpdateManyMutationInput, PackUncheckedUpdateManyInput>
    /**
     * Filter which Packs to update
     */
    where?: PackWhereInput
  }


  /**
   * Pack upsert
   */
  export type PackUpsertArgs = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect | null
    /**
     * The filter to search for the Pack to update in case it exists.
     */
    where: PackWhereUniqueInput
    /**
     * In case the Pack found by the `where` argument doesn't exist, create a new Pack with this data.
     */
    create: XOR<PackCreateInput, PackUncheckedCreateInput>
    /**
     * In case the Pack was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackUpdateInput, PackUncheckedUpdateInput>
  }


  /**
   * Pack delete
   */
  export type PackDeleteArgs = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect | null
    /**
     * Filter which Pack to delete.
     */
    where: PackWhereUniqueInput
  }


  /**
   * Pack deleteMany
   */
  export type PackDeleteManyArgs = {
    /**
     * Filter which Packs to delete
     */
    where?: PackWhereInput
  }


  /**
   * Pack without action
   */
  export type PackArgs = {
    /**
     * Select specific fields to fetch from the Pack
     */
    select?: PackSelect | null
  }



  /**
   * Model Community
   */


  export type AggregateCommunity = {
    _count: CommunityCountAggregateOutputType | null
    _avg: CommunityAvgAggregateOutputType | null
    _sum: CommunitySumAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  export type CommunityAvgAggregateOutputType = {
    id: number | null
  }

  export type CommunitySumAggregateOutputType = {
    id: number | null
  }

  export type CommunityMinAggregateOutputType = {
    id: number | null
    name: string | null
    skill: string | null
  }

  export type CommunityMaxAggregateOutputType = {
    id: number | null
    name: string | null
    skill: string | null
  }

  export type CommunityCountAggregateOutputType = {
    id: number
    name: number
    skill: number
    _all: number
  }


  export type CommunityAvgAggregateInputType = {
    id?: true
  }

  export type CommunitySumAggregateInputType = {
    id?: true
  }

  export type CommunityMinAggregateInputType = {
    id?: true
    name?: true
    skill?: true
  }

  export type CommunityMaxAggregateInputType = {
    id?: true
    name?: true
    skill?: true
  }

  export type CommunityCountAggregateInputType = {
    id?: true
    name?: true
    skill?: true
    _all?: true
  }

  export type CommunityAggregateArgs = {
    /**
     * Filter which Community to aggregate.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: Enumerable<CommunityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Communities
    **/
    _count?: true | CommunityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommunityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommunitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunityMaxAggregateInputType
  }

  export type GetCommunityAggregateType<T extends CommunityAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunity[P]>
      : GetScalarType<T[P], AggregateCommunity[P]>
  }




  export type CommunityGroupByArgs = {
    where?: CommunityWhereInput
    orderBy?: Enumerable<CommunityOrderByWithAggregationInput>
    by: CommunityScalarFieldEnum[]
    having?: CommunityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunityCountAggregateInputType | true
    _avg?: CommunityAvgAggregateInputType
    _sum?: CommunitySumAggregateInputType
    _min?: CommunityMinAggregateInputType
    _max?: CommunityMaxAggregateInputType
  }


  export type CommunityGroupByOutputType = {
    id: number
    name: string
    skill: string
    _count: CommunityCountAggregateOutputType | null
    _avg: CommunityAvgAggregateOutputType | null
    _sum: CommunitySumAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  type GetCommunityGroupByPayload<T extends CommunityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CommunityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunityGroupByOutputType[P]>
            : GetScalarType<T[P], CommunityGroupByOutputType[P]>
        }
      >
    >


  export type CommunitySelect = {
    id?: boolean
    name?: boolean
    skill?: boolean
    memberships?: boolean | Community$membershipsArgs
    _count?: boolean | CommunityCountOutputTypeArgs
  }


  export type CommunityInclude = {
    memberships?: boolean | Community$membershipsArgs
    _count?: boolean | CommunityCountOutputTypeArgs
  }

  export type CommunityGetPayload<S extends boolean | null | undefined | CommunityArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Community :
    S extends undefined ? never :
    S extends { include: any } & (CommunityArgs | CommunityFindManyArgs)
    ? Community  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'memberships' ? Array < MembershipGetPayload<S['include'][P]>>  :
        P extends '_count' ? CommunityCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CommunityArgs | CommunityFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'memberships' ? Array < MembershipGetPayload<S['select'][P]>>  :
        P extends '_count' ? CommunityCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Community ? Community[P] : never
  } 
      : Community


  type CommunityCountArgs = 
    Omit<CommunityFindManyArgs, 'select' | 'include'> & {
      select?: CommunityCountAggregateInputType | true
    }

  export interface CommunityDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Community that matches the filter.
     * @param {CommunityFindUniqueArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommunityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommunityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Community'> extends True ? Prisma__CommunityClient<CommunityGetPayload<T>> : Prisma__CommunityClient<CommunityGetPayload<T> | null, null>

    /**
     * Find one Community that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommunityFindUniqueOrThrowArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommunityFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CommunityFindUniqueOrThrowArgs>
    ): Prisma__CommunityClient<CommunityGetPayload<T>>

    /**
     * Find the first Community that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindFirstArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommunityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommunityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Community'> extends True ? Prisma__CommunityClient<CommunityGetPayload<T>> : Prisma__CommunityClient<CommunityGetPayload<T> | null, null>

    /**
     * Find the first Community that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindFirstOrThrowArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommunityFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CommunityFindFirstOrThrowArgs>
    ): Prisma__CommunityClient<CommunityGetPayload<T>>

    /**
     * Find zero or more Communities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Communities
     * const communities = await prisma.community.findMany()
     * 
     * // Get first 10 Communities
     * const communities = await prisma.community.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const communityWithIdOnly = await prisma.community.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommunityFindManyArgs>(
      args?: SelectSubset<T, CommunityFindManyArgs>
    ): Prisma.PrismaPromise<Array<CommunityGetPayload<T>>>

    /**
     * Create a Community.
     * @param {CommunityCreateArgs} args - Arguments to create a Community.
     * @example
     * // Create one Community
     * const Community = await prisma.community.create({
     *   data: {
     *     // ... data to create a Community
     *   }
     * })
     * 
    **/
    create<T extends CommunityCreateArgs>(
      args: SelectSubset<T, CommunityCreateArgs>
    ): Prisma__CommunityClient<CommunityGetPayload<T>>

    /**
     * Create many Communities.
     *     @param {CommunityCreateManyArgs} args - Arguments to create many Communities.
     *     @example
     *     // Create many Communities
     *     const community = await prisma.community.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommunityCreateManyArgs>(
      args?: SelectSubset<T, CommunityCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Community.
     * @param {CommunityDeleteArgs} args - Arguments to delete one Community.
     * @example
     * // Delete one Community
     * const Community = await prisma.community.delete({
     *   where: {
     *     // ... filter to delete one Community
     *   }
     * })
     * 
    **/
    delete<T extends CommunityDeleteArgs>(
      args: SelectSubset<T, CommunityDeleteArgs>
    ): Prisma__CommunityClient<CommunityGetPayload<T>>

    /**
     * Update one Community.
     * @param {CommunityUpdateArgs} args - Arguments to update one Community.
     * @example
     * // Update one Community
     * const community = await prisma.community.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommunityUpdateArgs>(
      args: SelectSubset<T, CommunityUpdateArgs>
    ): Prisma__CommunityClient<CommunityGetPayload<T>>

    /**
     * Delete zero or more Communities.
     * @param {CommunityDeleteManyArgs} args - Arguments to filter Communities to delete.
     * @example
     * // Delete a few Communities
     * const { count } = await prisma.community.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommunityDeleteManyArgs>(
      args?: SelectSubset<T, CommunityDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Communities
     * const community = await prisma.community.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommunityUpdateManyArgs>(
      args: SelectSubset<T, CommunityUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Community.
     * @param {CommunityUpsertArgs} args - Arguments to update or create a Community.
     * @example
     * // Update or create a Community
     * const community = await prisma.community.upsert({
     *   create: {
     *     // ... data to create a Community
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Community we want to update
     *   }
     * })
    **/
    upsert<T extends CommunityUpsertArgs>(
      args: SelectSubset<T, CommunityUpsertArgs>
    ): Prisma__CommunityClient<CommunityGetPayload<T>>

    /**
     * Count the number of Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityCountArgs} args - Arguments to filter Communities to count.
     * @example
     * // Count the number of Communities
     * const count = await prisma.community.count({
     *   where: {
     *     // ... the filter for the Communities we want to count
     *   }
     * })
    **/
    count<T extends CommunityCountArgs>(
      args?: Subset<T, CommunityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunityAggregateArgs>(args: Subset<T, CommunityAggregateArgs>): Prisma.PrismaPromise<GetCommunityAggregateType<T>>

    /**
     * Group by Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunityGroupByArgs['orderBy'] }
        : { orderBy?: CommunityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Community.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommunityClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    memberships<T extends Community$membershipsArgs= {}>(args?: Subset<T, Community$membershipsArgs>): Prisma.PrismaPromise<Array<MembershipGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Community base type for findUnique actions
   */
  export type CommunityFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommunityInclude | null
    /**
     * Filter, which Community to fetch.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community findUnique
   */
  export interface CommunityFindUniqueArgs extends CommunityFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Community findUniqueOrThrow
   */
  export type CommunityFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommunityInclude | null
    /**
     * Filter, which Community to fetch.
     */
    where: CommunityWhereUniqueInput
  }


  /**
   * Community base type for findFirst actions
   */
  export type CommunityFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommunityInclude | null
    /**
     * Filter, which Community to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: Enumerable<CommunityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communities.
     */
    distinct?: Enumerable<CommunityScalarFieldEnum>
  }

  /**
   * Community findFirst
   */
  export interface CommunityFindFirstArgs extends CommunityFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Community findFirstOrThrow
   */
  export type CommunityFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommunityInclude | null
    /**
     * Filter, which Community to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: Enumerable<CommunityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communities.
     */
    distinct?: Enumerable<CommunityScalarFieldEnum>
  }


  /**
   * Community findMany
   */
  export type CommunityFindManyArgs = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommunityInclude | null
    /**
     * Filter, which Communities to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: Enumerable<CommunityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    distinct?: Enumerable<CommunityScalarFieldEnum>
  }


  /**
   * Community create
   */
  export type CommunityCreateArgs = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommunityInclude | null
    /**
     * The data needed to create a Community.
     */
    data: XOR<CommunityCreateInput, CommunityUncheckedCreateInput>
  }


  /**
   * Community createMany
   */
  export type CommunityCreateManyArgs = {
    /**
     * The data used to create many Communities.
     */
    data: Enumerable<CommunityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Community update
   */
  export type CommunityUpdateArgs = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommunityInclude | null
    /**
     * The data needed to update a Community.
     */
    data: XOR<CommunityUpdateInput, CommunityUncheckedUpdateInput>
    /**
     * Choose, which Community to update.
     */
    where: CommunityWhereUniqueInput
  }


  /**
   * Community updateMany
   */
  export type CommunityUpdateManyArgs = {
    /**
     * The data used to update Communities.
     */
    data: XOR<CommunityUpdateManyMutationInput, CommunityUncheckedUpdateManyInput>
    /**
     * Filter which Communities to update
     */
    where?: CommunityWhereInput
  }


  /**
   * Community upsert
   */
  export type CommunityUpsertArgs = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommunityInclude | null
    /**
     * The filter to search for the Community to update in case it exists.
     */
    where: CommunityWhereUniqueInput
    /**
     * In case the Community found by the `where` argument doesn't exist, create a new Community with this data.
     */
    create: XOR<CommunityCreateInput, CommunityUncheckedCreateInput>
    /**
     * In case the Community was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommunityUpdateInput, CommunityUncheckedUpdateInput>
  }


  /**
   * Community delete
   */
  export type CommunityDeleteArgs = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommunityInclude | null
    /**
     * Filter which Community to delete.
     */
    where: CommunityWhereUniqueInput
  }


  /**
   * Community deleteMany
   */
  export type CommunityDeleteManyArgs = {
    /**
     * Filter which Communities to delete
     */
    where?: CommunityWhereInput
  }


  /**
   * Community.memberships
   */
  export type Community$membershipsArgs = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembershipInclude | null
    where?: MembershipWhereInput
    orderBy?: Enumerable<MembershipOrderByWithRelationInput>
    cursor?: MembershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }


  /**
   * Community without action
   */
  export type CommunityArgs = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommunityInclude | null
  }



  /**
   * Model Post
   */


  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    likes: number | null
    userId: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    likes: number | null
    userId: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    image: string | null
    title: string | null
    skill: string | null
    desc: string | null
    likes: number | null
    userId: number | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    image: string | null
    title: string | null
    skill: string | null
    desc: string | null
    likes: number | null
    userId: number | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    image: number
    title: number
    skill: number
    desc: number
    likes: number
    userId: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    likes?: true
    userId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    likes?: true
    userId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    image?: true
    title?: true
    skill?: true
    desc?: true
    likes?: true
    userId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    image?: true
    title?: true
    skill?: true
    desc?: true
    likes?: true
    userId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    image?: true
    title?: true
    skill?: true
    desc?: true
    likes?: true
    userId?: true
    _all?: true
  }

  export type PostAggregateArgs = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs = {
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithAggregationInput>
    by: PostScalarFieldEnum[]
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }


  export type PostGroupByOutputType = {
    id: number
    image: string
    title: string
    skill: string
    desc: string
    likes: number
    userId: number
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect = {
    id?: boolean
    image?: boolean
    title?: boolean
    skill?: boolean
    desc?: boolean
    likes?: boolean
    userId?: boolean
    comments?: boolean | Post$commentsArgs
    reviews?: boolean | Post$reviewsArgs
    user?: boolean | UserArgs
    _count?: boolean | PostCountOutputTypeArgs
  }


  export type PostInclude = {
    comments?: boolean | Post$commentsArgs
    reviews?: boolean | Post$reviewsArgs
    user?: boolean | UserArgs
    _count?: boolean | PostCountOutputTypeArgs
  }

  export type PostGetPayload<S extends boolean | null | undefined | PostArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Post :
    S extends undefined ? never :
    S extends { include: any } & (PostArgs | PostFindManyArgs)
    ? Post  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'comments' ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends 'reviews' ? Array < ReviewGetPayload<S['include'][P]>>  :
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends '_count' ? PostCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PostArgs | PostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'comments' ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends 'reviews' ? Array < ReviewGetPayload<S['select'][P]>>  :
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends '_count' ? PostCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Post ? Post[P] : never
  } 
      : Post


  type PostCountArgs = 
    Omit<PostFindManyArgs, 'select' | 'include'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find one Post that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostFindUniqueOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find the first Post that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostFindFirstOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs>(
      args?: SelectSubset<T, PostFindManyArgs>
    ): Prisma.PrismaPromise<Array<PostGetPayload<T>>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs>(
      args: SelectSubset<T, PostCreateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Create many Posts.
     *     @param {PostCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const post = await prisma.post.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostCreateManyArgs>(
      args?: SelectSubset<T, PostCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs>(
      args: SelectSubset<T, PostDeleteArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs>(
      args: SelectSubset<T, PostUpdateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs>(
      args?: SelectSubset<T, PostDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs>(
      args: SelectSubset<T, PostUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs>(
      args: SelectSubset<T, PostUpsertArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    comments<T extends Post$commentsArgs= {}>(args?: Subset<T, Post$commentsArgs>): Prisma.PrismaPromise<Array<CommentGetPayload<T>>| Null>;

    reviews<T extends Post$reviewsArgs= {}>(args?: Subset<T, Post$reviewsArgs>): Prisma.PrismaPromise<Array<ReviewGetPayload<T>>| Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Post base type for findUnique actions
   */
  export type PostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUnique
   */
  export interface PostFindUniqueArgs extends PostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post base type for findFirst actions
   */
  export type PostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: Enumerable<PostScalarFieldEnum>
  }

  /**
   * Post findFirst
   */
  export interface PostFindFirstArgs extends PostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post findMany
   */
  export type PostFindManyArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post create
   */
  export type PostCreateArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }


  /**
   * Post createMany
   */
  export type PostCreateManyArgs = {
    /**
     * The data used to create many Posts.
     */
    data: Enumerable<PostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Post update
   */
  export type PostUpdateArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
  }


  /**
   * Post upsert
   */
  export type PostUpsertArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }


  /**
   * Post delete
   */
  export type PostDeleteArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
  }


  /**
   * Post.comments
   */
  export type Post$commentsArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Post.reviews
   */
  export type Post$reviewsArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    where?: ReviewWhereInput
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }


  /**
   * Post without action
   */
  export type PostArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
  }



  /**
   * Model Comment
   */


  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    text: string | null
    postId: number | null
    userId: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    text: string | null
    postId: number | null
    userId: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    text: number
    postId: number
    userId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    text?: true
    postId?: true
    userId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    text?: true
    postId?: true
    userId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    text?: true
    postId?: true
    userId?: true
    _all?: true
  }

  export type CommentAggregateArgs = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs = {
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByWithAggregationInput>
    by: CommentScalarFieldEnum[]
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }


  export type CommentGroupByOutputType = {
    id: number
    text: string
    postId: number
    userId: number
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect = {
    id?: boolean
    text?: boolean
    postId?: boolean
    userId?: boolean
    post?: boolean | PostArgs
    user?: boolean | UserArgs
  }


  export type CommentInclude = {
    post?: boolean | PostArgs
    user?: boolean | UserArgs
  }

  export type CommentGetPayload<S extends boolean | null | undefined | CommentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Comment :
    S extends undefined ? never :
    S extends { include: any } & (CommentArgs | CommentFindManyArgs)
    ? Comment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? PostGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CommentArgs | CommentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? PostGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Comment ? Comment[P] : never
  } 
      : Comment


  type CommentCountArgs = 
    Omit<CommentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comment'> extends True ? Prisma__CommentClient<CommentGetPayload<T>> : Prisma__CommentClient<CommentGetPayload<T> | null, null>

    /**
     * Find one Comment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comment'> extends True ? Prisma__CommentClient<CommentGetPayload<T>> : Prisma__CommentClient<CommentGetPayload<T> | null, null>

    /**
     * Find the first Comment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs>(
      args?: SelectSubset<T, CommentFindManyArgs>
    ): Prisma.PrismaPromise<Array<CommentGetPayload<T>>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs>(
      args: SelectSubset<T, CommentCreateArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs>(
      args?: SelectSubset<T, CommentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs>(
      args: SelectSubset<T, CommentDeleteArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs>(
      args: SelectSubset<T, CommentUpdateArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs>(
      args?: SelectSubset<T, CommentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs>(
      args: SelectSubset<T, CommentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs>(
      args: SelectSubset<T, CommentUpsertArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends PostArgs= {}>(args?: Subset<T, PostArgs>): Prisma__PostClient<PostGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Comment base type for findUnique actions
   */
  export type CommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUnique
   */
  export interface CommentFindUniqueArgs extends CommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment base type for findFirst actions
   */
  export type CommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: Enumerable<CommentScalarFieldEnum>
  }

  /**
   * Comment findFirst
   */
  export interface CommentFindFirstArgs extends CommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment findMany
   */
  export type CommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs = {
    /**
     * The data used to create many Comments.
     */
    data: Enumerable<CommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }


  /**
   * Comment without action
   */
  export type CommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
  }



  /**
   * Model Review
   */


  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    rating: number | null
    postId: number | null
    userId: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    rating: number | null
    postId: number | null
    userId: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    rating: number | null
    postId: number | null
    userId: number | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    rating: number | null
    postId: number | null
    userId: number | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    rating: number
    postId: number
    userId: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    rating?: true
    postId?: true
    userId?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    rating?: true
    postId?: true
    userId?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    rating?: true
    postId?: true
    userId?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    rating?: true
    postId?: true
    userId?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    rating?: true
    postId?: true
    userId?: true
    _all?: true
  }

  export type ReviewAggregateArgs = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs = {
    where?: ReviewWhereInput
    orderBy?: Enumerable<ReviewOrderByWithAggregationInput>
    by: ReviewScalarFieldEnum[]
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }


  export type ReviewGroupByOutputType = {
    id: number
    rating: number
    postId: number
    userId: number
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect = {
    id?: boolean
    rating?: boolean
    postId?: boolean
    userId?: boolean
    post?: boolean | PostArgs
    user?: boolean | UserArgs
  }


  export type ReviewInclude = {
    post?: boolean | PostArgs
    user?: boolean | UserArgs
  }

  export type ReviewGetPayload<S extends boolean | null | undefined | ReviewArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Review :
    S extends undefined ? never :
    S extends { include: any } & (ReviewArgs | ReviewFindManyArgs)
    ? Review  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? PostGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ReviewArgs | ReviewFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? PostGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Review ? Review[P] : never
  } 
      : Review


  type ReviewCountArgs = 
    Omit<ReviewFindManyArgs, 'select' | 'include'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReviewFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Review'> extends True ? Prisma__ReviewClient<ReviewGetPayload<T>> : Prisma__ReviewClient<ReviewGetPayload<T> | null, null>

    /**
     * Find one Review that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReviewFindUniqueOrThrowArgs>
    ): Prisma__ReviewClient<ReviewGetPayload<T>>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReviewFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Review'> extends True ? Prisma__ReviewClient<ReviewGetPayload<T>> : Prisma__ReviewClient<ReviewGetPayload<T> | null, null>

    /**
     * Find the first Review that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReviewFindFirstOrThrowArgs>
    ): Prisma__ReviewClient<ReviewGetPayload<T>>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReviewFindManyArgs>(
      args?: SelectSubset<T, ReviewFindManyArgs>
    ): Prisma.PrismaPromise<Array<ReviewGetPayload<T>>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
    **/
    create<T extends ReviewCreateArgs>(
      args: SelectSubset<T, ReviewCreateArgs>
    ): Prisma__ReviewClient<ReviewGetPayload<T>>

    /**
     * Create many Reviews.
     *     @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     *     @example
     *     // Create many Reviews
     *     const review = await prisma.review.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReviewCreateManyArgs>(
      args?: SelectSubset<T, ReviewCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
    **/
    delete<T extends ReviewDeleteArgs>(
      args: SelectSubset<T, ReviewDeleteArgs>
    ): Prisma__ReviewClient<ReviewGetPayload<T>>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewUpdateArgs>(
      args: SelectSubset<T, ReviewUpdateArgs>
    ): Prisma__ReviewClient<ReviewGetPayload<T>>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewDeleteManyArgs>(
      args?: SelectSubset<T, ReviewDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewUpdateManyArgs>(
      args: SelectSubset<T, ReviewUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewUpsertArgs>(
      args: SelectSubset<T, ReviewUpsertArgs>
    ): Prisma__ReviewClient<ReviewGetPayload<T>>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReviewClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends PostArgs= {}>(args?: Subset<T, PostArgs>): Prisma__PostClient<PostGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Review base type for findUnique actions
   */
  export type ReviewFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUnique
   */
  export interface ReviewFindUniqueArgs extends ReviewFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review base type for findFirst actions
   */
  export type ReviewFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }

  /**
   * Review findFirst
   */
  export interface ReviewFindFirstArgs extends ReviewFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }


  /**
   * Review findMany
   */
  export type ReviewFindManyArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }


  /**
   * Review create
   */
  export type ReviewCreateArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }


  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs = {
    /**
     * The data used to create many Reviews.
     */
    data: Enumerable<ReviewCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Review update
   */
  export type ReviewUpdateArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
  }


  /**
   * Review upsert
   */
  export type ReviewUpsertArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }


  /**
   * Review delete
   */
  export type ReviewDeleteArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }


  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
  }


  /**
   * Review without action
   */
  export type ReviewArgs = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewInclude | null
  }



  /**
   * Model Friendship
   */


  export type AggregateFriendship = {
    _count: FriendshipCountAggregateOutputType | null
    _avg: FriendshipAvgAggregateOutputType | null
    _sum: FriendshipSumAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  export type FriendshipAvgAggregateOutputType = {
    id: number | null
    requestorId: number | null
    respondentId: number | null
  }

  export type FriendshipSumAggregateOutputType = {
    id: number | null
    requestorId: number | null
    respondentId: number | null
  }

  export type FriendshipMinAggregateOutputType = {
    id: number | null
    requestorId: number | null
    respondentId: number | null
    status: FriendshipStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FriendshipMaxAggregateOutputType = {
    id: number | null
    requestorId: number | null
    respondentId: number | null
    status: FriendshipStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FriendshipCountAggregateOutputType = {
    id: number
    requestorId: number
    respondentId: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FriendshipAvgAggregateInputType = {
    id?: true
    requestorId?: true
    respondentId?: true
  }

  export type FriendshipSumAggregateInputType = {
    id?: true
    requestorId?: true
    respondentId?: true
  }

  export type FriendshipMinAggregateInputType = {
    id?: true
    requestorId?: true
    respondentId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FriendshipMaxAggregateInputType = {
    id?: true
    requestorId?: true
    respondentId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FriendshipCountAggregateInputType = {
    id?: true
    requestorId?: true
    respondentId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FriendshipAggregateArgs = {
    /**
     * Filter which Friendship to aggregate.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Friendships
    **/
    _count?: true | FriendshipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FriendshipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FriendshipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendshipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendshipMaxAggregateInputType
  }

  export type GetFriendshipAggregateType<T extends FriendshipAggregateArgs> = {
        [P in keyof T & keyof AggregateFriendship]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriendship[P]>
      : GetScalarType<T[P], AggregateFriendship[P]>
  }




  export type FriendshipGroupByArgs = {
    where?: FriendshipWhereInput
    orderBy?: Enumerable<FriendshipOrderByWithAggregationInput>
    by: FriendshipScalarFieldEnum[]
    having?: FriendshipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendshipCountAggregateInputType | true
    _avg?: FriendshipAvgAggregateInputType
    _sum?: FriendshipSumAggregateInputType
    _min?: FriendshipMinAggregateInputType
    _max?: FriendshipMaxAggregateInputType
  }


  export type FriendshipGroupByOutputType = {
    id: number
    requestorId: number
    respondentId: number
    status: FriendshipStatus
    createdAt: Date
    updatedAt: Date
    _count: FriendshipCountAggregateOutputType | null
    _avg: FriendshipAvgAggregateOutputType | null
    _sum: FriendshipSumAggregateOutputType | null
    _min: FriendshipMinAggregateOutputType | null
    _max: FriendshipMaxAggregateOutputType | null
  }

  type GetFriendshipGroupByPayload<T extends FriendshipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FriendshipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendshipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
            : GetScalarType<T[P], FriendshipGroupByOutputType[P]>
        }
      >
    >


  export type FriendshipSelect = {
    id?: boolean
    requestorId?: boolean
    respondentId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requestor?: boolean | UserArgs
    respondent?: boolean | UserArgs
  }


  export type FriendshipInclude = {
    requestor?: boolean | UserArgs
    respondent?: boolean | UserArgs
  }

  export type FriendshipGetPayload<S extends boolean | null | undefined | FriendshipArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Friendship :
    S extends undefined ? never :
    S extends { include: any } & (FriendshipArgs | FriendshipFindManyArgs)
    ? Friendship  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'requestor' ? UserGetPayload<S['include'][P]> :
        P extends 'respondent' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FriendshipArgs | FriendshipFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'requestor' ? UserGetPayload<S['select'][P]> :
        P extends 'respondent' ? UserGetPayload<S['select'][P]> :  P extends keyof Friendship ? Friendship[P] : never
  } 
      : Friendship


  type FriendshipCountArgs = 
    Omit<FriendshipFindManyArgs, 'select' | 'include'> & {
      select?: FriendshipCountAggregateInputType | true
    }

  export interface FriendshipDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Friendship that matches the filter.
     * @param {FriendshipFindUniqueArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FriendshipFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FriendshipFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Friendship'> extends True ? Prisma__FriendshipClient<FriendshipGetPayload<T>> : Prisma__FriendshipClient<FriendshipGetPayload<T> | null, null>

    /**
     * Find one Friendship that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FriendshipFindUniqueOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FriendshipFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FriendshipFindUniqueOrThrowArgs>
    ): Prisma__FriendshipClient<FriendshipGetPayload<T>>

    /**
     * Find the first Friendship that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FriendshipFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FriendshipFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Friendship'> extends True ? Prisma__FriendshipClient<FriendshipGetPayload<T>> : Prisma__FriendshipClient<FriendshipGetPayload<T> | null, null>

    /**
     * Find the first Friendship that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindFirstOrThrowArgs} args - Arguments to find a Friendship
     * @example
     * // Get one Friendship
     * const friendship = await prisma.friendship.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FriendshipFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FriendshipFindFirstOrThrowArgs>
    ): Prisma__FriendshipClient<FriendshipGetPayload<T>>

    /**
     * Find zero or more Friendships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Friendships
     * const friendships = await prisma.friendship.findMany()
     * 
     * // Get first 10 Friendships
     * const friendships = await prisma.friendship.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const friendshipWithIdOnly = await prisma.friendship.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FriendshipFindManyArgs>(
      args?: SelectSubset<T, FriendshipFindManyArgs>
    ): Prisma.PrismaPromise<Array<FriendshipGetPayload<T>>>

    /**
     * Create a Friendship.
     * @param {FriendshipCreateArgs} args - Arguments to create a Friendship.
     * @example
     * // Create one Friendship
     * const Friendship = await prisma.friendship.create({
     *   data: {
     *     // ... data to create a Friendship
     *   }
     * })
     * 
    **/
    create<T extends FriendshipCreateArgs>(
      args: SelectSubset<T, FriendshipCreateArgs>
    ): Prisma__FriendshipClient<FriendshipGetPayload<T>>

    /**
     * Create many Friendships.
     *     @param {FriendshipCreateManyArgs} args - Arguments to create many Friendships.
     *     @example
     *     // Create many Friendships
     *     const friendship = await prisma.friendship.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FriendshipCreateManyArgs>(
      args?: SelectSubset<T, FriendshipCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Friendship.
     * @param {FriendshipDeleteArgs} args - Arguments to delete one Friendship.
     * @example
     * // Delete one Friendship
     * const Friendship = await prisma.friendship.delete({
     *   where: {
     *     // ... filter to delete one Friendship
     *   }
     * })
     * 
    **/
    delete<T extends FriendshipDeleteArgs>(
      args: SelectSubset<T, FriendshipDeleteArgs>
    ): Prisma__FriendshipClient<FriendshipGetPayload<T>>

    /**
     * Update one Friendship.
     * @param {FriendshipUpdateArgs} args - Arguments to update one Friendship.
     * @example
     * // Update one Friendship
     * const friendship = await prisma.friendship.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FriendshipUpdateArgs>(
      args: SelectSubset<T, FriendshipUpdateArgs>
    ): Prisma__FriendshipClient<FriendshipGetPayload<T>>

    /**
     * Delete zero or more Friendships.
     * @param {FriendshipDeleteManyArgs} args - Arguments to filter Friendships to delete.
     * @example
     * // Delete a few Friendships
     * const { count } = await prisma.friendship.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FriendshipDeleteManyArgs>(
      args?: SelectSubset<T, FriendshipDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Friendships
     * const friendship = await prisma.friendship.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FriendshipUpdateManyArgs>(
      args: SelectSubset<T, FriendshipUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Friendship.
     * @param {FriendshipUpsertArgs} args - Arguments to update or create a Friendship.
     * @example
     * // Update or create a Friendship
     * const friendship = await prisma.friendship.upsert({
     *   create: {
     *     // ... data to create a Friendship
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Friendship we want to update
     *   }
     * })
    **/
    upsert<T extends FriendshipUpsertArgs>(
      args: SelectSubset<T, FriendshipUpsertArgs>
    ): Prisma__FriendshipClient<FriendshipGetPayload<T>>

    /**
     * Count the number of Friendships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipCountArgs} args - Arguments to filter Friendships to count.
     * @example
     * // Count the number of Friendships
     * const count = await prisma.friendship.count({
     *   where: {
     *     // ... the filter for the Friendships we want to count
     *   }
     * })
    **/
    count<T extends FriendshipCountArgs>(
      args?: Subset<T, FriendshipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendshipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendshipAggregateArgs>(args: Subset<T, FriendshipAggregateArgs>): Prisma.PrismaPromise<GetFriendshipAggregateType<T>>

    /**
     * Group by Friendship.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendshipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendshipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendshipGroupByArgs['orderBy'] }
        : { orderBy?: FriendshipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendshipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendshipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Friendship.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FriendshipClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    requestor<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    respondent<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Friendship base type for findUnique actions
   */
  export type FriendshipFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendship to fetch.
     */
    where: FriendshipWhereUniqueInput
  }

  /**
   * Friendship findUnique
   */
  export interface FriendshipFindUniqueArgs extends FriendshipFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Friendship findUniqueOrThrow
   */
  export type FriendshipFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendship to fetch.
     */
    where: FriendshipWhereUniqueInput
  }


  /**
   * Friendship base type for findFirst actions
   */
  export type FriendshipFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendship to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }

  /**
   * Friendship findFirst
   */
  export interface FriendshipFindFirstArgs extends FriendshipFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Friendship findFirstOrThrow
   */
  export type FriendshipFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendship to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friendships.
     */
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }


  /**
   * Friendship findMany
   */
  export type FriendshipFindManyArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * Filter, which Friendships to fetch.
     */
    where?: FriendshipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friendships to fetch.
     */
    orderBy?: Enumerable<FriendshipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Friendships.
     */
    cursor?: FriendshipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friendships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friendships.
     */
    skip?: number
    distinct?: Enumerable<FriendshipScalarFieldEnum>
  }


  /**
   * Friendship create
   */
  export type FriendshipCreateArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * The data needed to create a Friendship.
     */
    data: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
  }


  /**
   * Friendship createMany
   */
  export type FriendshipCreateManyArgs = {
    /**
     * The data used to create many Friendships.
     */
    data: Enumerable<FriendshipCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Friendship update
   */
  export type FriendshipUpdateArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * The data needed to update a Friendship.
     */
    data: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
    /**
     * Choose, which Friendship to update.
     */
    where: FriendshipWhereUniqueInput
  }


  /**
   * Friendship updateMany
   */
  export type FriendshipUpdateManyArgs = {
    /**
     * The data used to update Friendships.
     */
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyInput>
    /**
     * Filter which Friendships to update
     */
    where?: FriendshipWhereInput
  }


  /**
   * Friendship upsert
   */
  export type FriendshipUpsertArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * The filter to search for the Friendship to update in case it exists.
     */
    where: FriendshipWhereUniqueInput
    /**
     * In case the Friendship found by the `where` argument doesn't exist, create a new Friendship with this data.
     */
    create: XOR<FriendshipCreateInput, FriendshipUncheckedCreateInput>
    /**
     * In case the Friendship was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FriendshipUpdateInput, FriendshipUncheckedUpdateInput>
  }


  /**
   * Friendship delete
   */
  export type FriendshipDeleteArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
    /**
     * Filter which Friendship to delete.
     */
    where: FriendshipWhereUniqueInput
  }


  /**
   * Friendship deleteMany
   */
  export type FriendshipDeleteManyArgs = {
    /**
     * Filter which Friendships to delete
     */
    where?: FriendshipWhereInput
  }


  /**
   * Friendship without action
   */
  export type FriendshipArgs = {
    /**
     * Select specific fields to fetch from the Friendship
     */
    select?: FriendshipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendshipInclude | null
  }



  /**
   * Model Membership
   */


  export type AggregateMembership = {
    _count: MembershipCountAggregateOutputType | null
    _avg: MembershipAvgAggregateOutputType | null
    _sum: MembershipSumAggregateOutputType | null
    _min: MembershipMinAggregateOutputType | null
    _max: MembershipMaxAggregateOutputType | null
  }

  export type MembershipAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    communityId: number | null
  }

  export type MembershipSumAggregateOutputType = {
    id: number | null
    userId: number | null
    communityId: number | null
  }

  export type MembershipMinAggregateOutputType = {
    id: number | null
    userId: number | null
    communityId: number | null
    isAdmin: boolean | null
    isAccepted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MembershipMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    communityId: number | null
    isAdmin: boolean | null
    isAccepted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MembershipCountAggregateOutputType = {
    id: number
    userId: number
    communityId: number
    isAdmin: number
    isAccepted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MembershipAvgAggregateInputType = {
    id?: true
    userId?: true
    communityId?: true
  }

  export type MembershipSumAggregateInputType = {
    id?: true
    userId?: true
    communityId?: true
  }

  export type MembershipMinAggregateInputType = {
    id?: true
    userId?: true
    communityId?: true
    isAdmin?: true
    isAccepted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MembershipMaxAggregateInputType = {
    id?: true
    userId?: true
    communityId?: true
    isAdmin?: true
    isAccepted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MembershipCountAggregateInputType = {
    id?: true
    userId?: true
    communityId?: true
    isAdmin?: true
    isAccepted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MembershipAggregateArgs = {
    /**
     * Filter which Membership to aggregate.
     */
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     */
    orderBy?: Enumerable<MembershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Memberships
    **/
    _count?: true | MembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MembershipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MembershipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MembershipMaxAggregateInputType
  }

  export type GetMembershipAggregateType<T extends MembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMembership[P]>
      : GetScalarType<T[P], AggregateMembership[P]>
  }




  export type MembershipGroupByArgs = {
    where?: MembershipWhereInput
    orderBy?: Enumerable<MembershipOrderByWithAggregationInput>
    by: MembershipScalarFieldEnum[]
    having?: MembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MembershipCountAggregateInputType | true
    _avg?: MembershipAvgAggregateInputType
    _sum?: MembershipSumAggregateInputType
    _min?: MembershipMinAggregateInputType
    _max?: MembershipMaxAggregateInputType
  }


  export type MembershipGroupByOutputType = {
    id: number
    userId: number
    communityId: number
    isAdmin: boolean
    isAccepted: boolean
    createdAt: Date
    updatedAt: Date
    _count: MembershipCountAggregateOutputType | null
    _avg: MembershipAvgAggregateOutputType | null
    _sum: MembershipSumAggregateOutputType | null
    _min: MembershipMinAggregateOutputType | null
    _max: MembershipMaxAggregateOutputType | null
  }

  type GetMembershipGroupByPayload<T extends MembershipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MembershipGroupByOutputType[P]>
            : GetScalarType<T[P], MembershipGroupByOutputType[P]>
        }
      >
    >


  export type MembershipSelect = {
    id?: boolean
    userId?: boolean
    communityId?: boolean
    isAdmin?: boolean
    isAccepted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs
    community?: boolean | CommunityArgs
  }


  export type MembershipInclude = {
    user?: boolean | UserArgs
    community?: boolean | CommunityArgs
  }

  export type MembershipGetPayload<S extends boolean | null | undefined | MembershipArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Membership :
    S extends undefined ? never :
    S extends { include: any } & (MembershipArgs | MembershipFindManyArgs)
    ? Membership  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'community' ? CommunityGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MembershipArgs | MembershipFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'community' ? CommunityGetPayload<S['select'][P]> :  P extends keyof Membership ? Membership[P] : never
  } 
      : Membership


  type MembershipCountArgs = 
    Omit<MembershipFindManyArgs, 'select' | 'include'> & {
      select?: MembershipCountAggregateInputType | true
    }

  export interface MembershipDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Membership that matches the filter.
     * @param {MembershipFindUniqueArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MembershipFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MembershipFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Membership'> extends True ? Prisma__MembershipClient<MembershipGetPayload<T>> : Prisma__MembershipClient<MembershipGetPayload<T> | null, null>

    /**
     * Find one Membership that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MembershipFindUniqueOrThrowArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MembershipFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MembershipFindUniqueOrThrowArgs>
    ): Prisma__MembershipClient<MembershipGetPayload<T>>

    /**
     * Find the first Membership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipFindFirstArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MembershipFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MembershipFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Membership'> extends True ? Prisma__MembershipClient<MembershipGetPayload<T>> : Prisma__MembershipClient<MembershipGetPayload<T> | null, null>

    /**
     * Find the first Membership that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipFindFirstOrThrowArgs} args - Arguments to find a Membership
     * @example
     * // Get one Membership
     * const membership = await prisma.membership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MembershipFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MembershipFindFirstOrThrowArgs>
    ): Prisma__MembershipClient<MembershipGetPayload<T>>

    /**
     * Find zero or more Memberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Memberships
     * const memberships = await prisma.membership.findMany()
     * 
     * // Get first 10 Memberships
     * const memberships = await prisma.membership.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const membershipWithIdOnly = await prisma.membership.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MembershipFindManyArgs>(
      args?: SelectSubset<T, MembershipFindManyArgs>
    ): Prisma.PrismaPromise<Array<MembershipGetPayload<T>>>

    /**
     * Create a Membership.
     * @param {MembershipCreateArgs} args - Arguments to create a Membership.
     * @example
     * // Create one Membership
     * const Membership = await prisma.membership.create({
     *   data: {
     *     // ... data to create a Membership
     *   }
     * })
     * 
    **/
    create<T extends MembershipCreateArgs>(
      args: SelectSubset<T, MembershipCreateArgs>
    ): Prisma__MembershipClient<MembershipGetPayload<T>>

    /**
     * Create many Memberships.
     *     @param {MembershipCreateManyArgs} args - Arguments to create many Memberships.
     *     @example
     *     // Create many Memberships
     *     const membership = await prisma.membership.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MembershipCreateManyArgs>(
      args?: SelectSubset<T, MembershipCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Membership.
     * @param {MembershipDeleteArgs} args - Arguments to delete one Membership.
     * @example
     * // Delete one Membership
     * const Membership = await prisma.membership.delete({
     *   where: {
     *     // ... filter to delete one Membership
     *   }
     * })
     * 
    **/
    delete<T extends MembershipDeleteArgs>(
      args: SelectSubset<T, MembershipDeleteArgs>
    ): Prisma__MembershipClient<MembershipGetPayload<T>>

    /**
     * Update one Membership.
     * @param {MembershipUpdateArgs} args - Arguments to update one Membership.
     * @example
     * // Update one Membership
     * const membership = await prisma.membership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MembershipUpdateArgs>(
      args: SelectSubset<T, MembershipUpdateArgs>
    ): Prisma__MembershipClient<MembershipGetPayload<T>>

    /**
     * Delete zero or more Memberships.
     * @param {MembershipDeleteManyArgs} args - Arguments to filter Memberships to delete.
     * @example
     * // Delete a few Memberships
     * const { count } = await prisma.membership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MembershipDeleteManyArgs>(
      args?: SelectSubset<T, MembershipDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Memberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Memberships
     * const membership = await prisma.membership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MembershipUpdateManyArgs>(
      args: SelectSubset<T, MembershipUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Membership.
     * @param {MembershipUpsertArgs} args - Arguments to update or create a Membership.
     * @example
     * // Update or create a Membership
     * const membership = await prisma.membership.upsert({
     *   create: {
     *     // ... data to create a Membership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Membership we want to update
     *   }
     * })
    **/
    upsert<T extends MembershipUpsertArgs>(
      args: SelectSubset<T, MembershipUpsertArgs>
    ): Prisma__MembershipClient<MembershipGetPayload<T>>

    /**
     * Count the number of Memberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipCountArgs} args - Arguments to filter Memberships to count.
     * @example
     * // Count the number of Memberships
     * const count = await prisma.membership.count({
     *   where: {
     *     // ... the filter for the Memberships we want to count
     *   }
     * })
    **/
    count<T extends MembershipCountArgs>(
      args?: Subset<T, MembershipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Membership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MembershipAggregateArgs>(args: Subset<T, MembershipAggregateArgs>): Prisma.PrismaPromise<GetMembershipAggregateType<T>>

    /**
     * Group by Membership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MembershipGroupByArgs['orderBy'] }
        : { orderBy?: MembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMembershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Membership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MembershipClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    community<T extends CommunityArgs= {}>(args?: Subset<T, CommunityArgs>): Prisma__CommunityClient<CommunityGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Membership base type for findUnique actions
   */
  export type MembershipFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembershipInclude | null
    /**
     * Filter, which Membership to fetch.
     */
    where: MembershipWhereUniqueInput
  }

  /**
   * Membership findUnique
   */
  export interface MembershipFindUniqueArgs extends MembershipFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Membership findUniqueOrThrow
   */
  export type MembershipFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembershipInclude | null
    /**
     * Filter, which Membership to fetch.
     */
    where: MembershipWhereUniqueInput
  }


  /**
   * Membership base type for findFirst actions
   */
  export type MembershipFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembershipInclude | null
    /**
     * Filter, which Membership to fetch.
     */
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     */
    orderBy?: Enumerable<MembershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Memberships.
     */
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Memberships.
     */
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }

  /**
   * Membership findFirst
   */
  export interface MembershipFindFirstArgs extends MembershipFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Membership findFirstOrThrow
   */
  export type MembershipFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembershipInclude | null
    /**
     * Filter, which Membership to fetch.
     */
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     */
    orderBy?: Enumerable<MembershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Memberships.
     */
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Memberships.
     */
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }


  /**
   * Membership findMany
   */
  export type MembershipFindManyArgs = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembershipInclude | null
    /**
     * Filter, which Memberships to fetch.
     */
    where?: MembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Memberships to fetch.
     */
    orderBy?: Enumerable<MembershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Memberships.
     */
    cursor?: MembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Memberships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Memberships.
     */
    skip?: number
    distinct?: Enumerable<MembershipScalarFieldEnum>
  }


  /**
   * Membership create
   */
  export type MembershipCreateArgs = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembershipInclude | null
    /**
     * The data needed to create a Membership.
     */
    data: XOR<MembershipCreateInput, MembershipUncheckedCreateInput>
  }


  /**
   * Membership createMany
   */
  export type MembershipCreateManyArgs = {
    /**
     * The data used to create many Memberships.
     */
    data: Enumerable<MembershipCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Membership update
   */
  export type MembershipUpdateArgs = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembershipInclude | null
    /**
     * The data needed to update a Membership.
     */
    data: XOR<MembershipUpdateInput, MembershipUncheckedUpdateInput>
    /**
     * Choose, which Membership to update.
     */
    where: MembershipWhereUniqueInput
  }


  /**
   * Membership updateMany
   */
  export type MembershipUpdateManyArgs = {
    /**
     * The data used to update Memberships.
     */
    data: XOR<MembershipUpdateManyMutationInput, MembershipUncheckedUpdateManyInput>
    /**
     * Filter which Memberships to update
     */
    where?: MembershipWhereInput
  }


  /**
   * Membership upsert
   */
  export type MembershipUpsertArgs = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembershipInclude | null
    /**
     * The filter to search for the Membership to update in case it exists.
     */
    where: MembershipWhereUniqueInput
    /**
     * In case the Membership found by the `where` argument doesn't exist, create a new Membership with this data.
     */
    create: XOR<MembershipCreateInput, MembershipUncheckedCreateInput>
    /**
     * In case the Membership was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MembershipUpdateInput, MembershipUncheckedUpdateInput>
  }


  /**
   * Membership delete
   */
  export type MembershipDeleteArgs = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembershipInclude | null
    /**
     * Filter which Membership to delete.
     */
    where: MembershipWhereUniqueInput
  }


  /**
   * Membership deleteMany
   */
  export type MembershipDeleteManyArgs = {
    /**
     * Filter which Memberships to delete
     */
    where?: MembershipWhereInput
  }


  /**
   * Membership without action
   */
  export type MembershipArgs = {
    /**
     * Select specific fields to fetch from the Membership
     */
    select?: MembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembershipInclude | null
  }



  /**
   * Model PostM
   */


  export type AggregatePostM = {
    _count: PostMCountAggregateOutputType | null
    _avg: PostMAvgAggregateOutputType | null
    _sum: PostMSumAggregateOutputType | null
    _min: PostMMinAggregateOutputType | null
    _max: PostMMaxAggregateOutputType | null
  }

  export type PostMAvgAggregateOutputType = {
    id: number | null
    price: number | null
    userId: number | null
  }

  export type PostMSumAggregateOutputType = {
    id: number | null
    price: number | null
    userId: number | null
  }

  export type PostMMinAggregateOutputType = {
    id: number | null
    title: string | null
    price: number | null
    description: string | null
    skill: string | null
    userId: number | null
  }

  export type PostMMaxAggregateOutputType = {
    id: number | null
    title: string | null
    price: number | null
    description: string | null
    skill: string | null
    userId: number | null
  }

  export type PostMCountAggregateOutputType = {
    id: number
    title: number
    price: number
    image: number
    description: number
    skill: number
    userId: number
    _all: number
  }


  export type PostMAvgAggregateInputType = {
    id?: true
    price?: true
    userId?: true
  }

  export type PostMSumAggregateInputType = {
    id?: true
    price?: true
    userId?: true
  }

  export type PostMMinAggregateInputType = {
    id?: true
    title?: true
    price?: true
    description?: true
    skill?: true
    userId?: true
  }

  export type PostMMaxAggregateInputType = {
    id?: true
    title?: true
    price?: true
    description?: true
    skill?: true
    userId?: true
  }

  export type PostMCountAggregateInputType = {
    id?: true
    title?: true
    price?: true
    image?: true
    description?: true
    skill?: true
    userId?: true
    _all?: true
  }

  export type PostMAggregateArgs = {
    /**
     * Filter which PostM to aggregate.
     */
    where?: PostMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostMS to fetch.
     */
    orderBy?: Enumerable<PostMOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostMS
    **/
    _count?: true | PostMCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostMAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostMSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMMaxAggregateInputType
  }

  export type GetPostMAggregateType<T extends PostMAggregateArgs> = {
        [P in keyof T & keyof AggregatePostM]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostM[P]>
      : GetScalarType<T[P], AggregatePostM[P]>
  }




  export type PostMGroupByArgs = {
    where?: PostMWhereInput
    orderBy?: Enumerable<PostMOrderByWithAggregationInput>
    by: PostMScalarFieldEnum[]
    having?: PostMScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostMCountAggregateInputType | true
    _avg?: PostMAvgAggregateInputType
    _sum?: PostMSumAggregateInputType
    _min?: PostMMinAggregateInputType
    _max?: PostMMaxAggregateInputType
  }


  export type PostMGroupByOutputType = {
    id: number
    title: string
    price: number
    image: string[]
    description: string
    skill: string
    userId: number
    _count: PostMCountAggregateOutputType | null
    _avg: PostMAvgAggregateOutputType | null
    _sum: PostMSumAggregateOutputType | null
    _min: PostMMinAggregateOutputType | null
    _max: PostMMaxAggregateOutputType | null
  }

  type GetPostMGroupByPayload<T extends PostMGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PostMGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostMGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostMGroupByOutputType[P]>
            : GetScalarType<T[P], PostMGroupByOutputType[P]>
        }
      >
    >


  export type PostMSelect = {
    id?: boolean
    title?: boolean
    price?: boolean
    image?: boolean
    description?: boolean
    skill?: boolean
    userId?: boolean
    reviews?: boolean | PostM$reviewsArgs
    user?: boolean | UserArgs
    _count?: boolean | PostMCountOutputTypeArgs
  }


  export type PostMInclude = {
    reviews?: boolean | PostM$reviewsArgs
    user?: boolean | UserArgs
    _count?: boolean | PostMCountOutputTypeArgs
  }

  export type PostMGetPayload<S extends boolean | null | undefined | PostMArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PostM :
    S extends undefined ? never :
    S extends { include: any } & (PostMArgs | PostMFindManyArgs)
    ? PostM  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'reviews' ? Array < ReviewMGetPayload<S['include'][P]>>  :
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends '_count' ? PostMCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PostMArgs | PostMFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'reviews' ? Array < ReviewMGetPayload<S['select'][P]>>  :
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends '_count' ? PostMCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof PostM ? PostM[P] : never
  } 
      : PostM


  type PostMCountArgs = 
    Omit<PostMFindManyArgs, 'select' | 'include'> & {
      select?: PostMCountAggregateInputType | true
    }

  export interface PostMDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one PostM that matches the filter.
     * @param {PostMFindUniqueArgs} args - Arguments to find a PostM
     * @example
     * // Get one PostM
     * const postM = await prisma.postM.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostMFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostMFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PostM'> extends True ? Prisma__PostMClient<PostMGetPayload<T>> : Prisma__PostMClient<PostMGetPayload<T> | null, null>

    /**
     * Find one PostM that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostMFindUniqueOrThrowArgs} args - Arguments to find a PostM
     * @example
     * // Get one PostM
     * const postM = await prisma.postM.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostMFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostMFindUniqueOrThrowArgs>
    ): Prisma__PostMClient<PostMGetPayload<T>>

    /**
     * Find the first PostM that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMFindFirstArgs} args - Arguments to find a PostM
     * @example
     * // Get one PostM
     * const postM = await prisma.postM.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostMFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostMFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PostM'> extends True ? Prisma__PostMClient<PostMGetPayload<T>> : Prisma__PostMClient<PostMGetPayload<T> | null, null>

    /**
     * Find the first PostM that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMFindFirstOrThrowArgs} args - Arguments to find a PostM
     * @example
     * // Get one PostM
     * const postM = await prisma.postM.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostMFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostMFindFirstOrThrowArgs>
    ): Prisma__PostMClient<PostMGetPayload<T>>

    /**
     * Find zero or more PostMS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostMS
     * const postMS = await prisma.postM.findMany()
     * 
     * // Get first 10 PostMS
     * const postMS = await prisma.postM.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postMWithIdOnly = await prisma.postM.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostMFindManyArgs>(
      args?: SelectSubset<T, PostMFindManyArgs>
    ): Prisma.PrismaPromise<Array<PostMGetPayload<T>>>

    /**
     * Create a PostM.
     * @param {PostMCreateArgs} args - Arguments to create a PostM.
     * @example
     * // Create one PostM
     * const PostM = await prisma.postM.create({
     *   data: {
     *     // ... data to create a PostM
     *   }
     * })
     * 
    **/
    create<T extends PostMCreateArgs>(
      args: SelectSubset<T, PostMCreateArgs>
    ): Prisma__PostMClient<PostMGetPayload<T>>

    /**
     * Create many PostMS.
     *     @param {PostMCreateManyArgs} args - Arguments to create many PostMS.
     *     @example
     *     // Create many PostMS
     *     const postM = await prisma.postM.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostMCreateManyArgs>(
      args?: SelectSubset<T, PostMCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PostM.
     * @param {PostMDeleteArgs} args - Arguments to delete one PostM.
     * @example
     * // Delete one PostM
     * const PostM = await prisma.postM.delete({
     *   where: {
     *     // ... filter to delete one PostM
     *   }
     * })
     * 
    **/
    delete<T extends PostMDeleteArgs>(
      args: SelectSubset<T, PostMDeleteArgs>
    ): Prisma__PostMClient<PostMGetPayload<T>>

    /**
     * Update one PostM.
     * @param {PostMUpdateArgs} args - Arguments to update one PostM.
     * @example
     * // Update one PostM
     * const postM = await prisma.postM.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostMUpdateArgs>(
      args: SelectSubset<T, PostMUpdateArgs>
    ): Prisma__PostMClient<PostMGetPayload<T>>

    /**
     * Delete zero or more PostMS.
     * @param {PostMDeleteManyArgs} args - Arguments to filter PostMS to delete.
     * @example
     * // Delete a few PostMS
     * const { count } = await prisma.postM.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostMDeleteManyArgs>(
      args?: SelectSubset<T, PostMDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostMS
     * const postM = await prisma.postM.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostMUpdateManyArgs>(
      args: SelectSubset<T, PostMUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PostM.
     * @param {PostMUpsertArgs} args - Arguments to update or create a PostM.
     * @example
     * // Update or create a PostM
     * const postM = await prisma.postM.upsert({
     *   create: {
     *     // ... data to create a PostM
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostM we want to update
     *   }
     * })
    **/
    upsert<T extends PostMUpsertArgs>(
      args: SelectSubset<T, PostMUpsertArgs>
    ): Prisma__PostMClient<PostMGetPayload<T>>

    /**
     * Count the number of PostMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMCountArgs} args - Arguments to filter PostMS to count.
     * @example
     * // Count the number of PostMS
     * const count = await prisma.postM.count({
     *   where: {
     *     // ... the filter for the PostMS we want to count
     *   }
     * })
    **/
    count<T extends PostMCountArgs>(
      args?: Subset<T, PostMCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostMCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostMAggregateArgs>(args: Subset<T, PostMAggregateArgs>): Prisma.PrismaPromise<GetPostMAggregateType<T>>

    /**
     * Group by PostM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostMGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostMGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostMGroupByArgs['orderBy'] }
        : { orderBy?: PostMGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostMGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostMGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PostM.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostMClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    reviews<T extends PostM$reviewsArgs= {}>(args?: Subset<T, PostM$reviewsArgs>): Prisma.PrismaPromise<Array<ReviewMGetPayload<T>>| Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PostM base type for findUnique actions
   */
  export type PostMFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the PostM
     */
    select?: PostMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostMInclude | null
    /**
     * Filter, which PostM to fetch.
     */
    where: PostMWhereUniqueInput
  }

  /**
   * PostM findUnique
   */
  export interface PostMFindUniqueArgs extends PostMFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PostM findUniqueOrThrow
   */
  export type PostMFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PostM
     */
    select?: PostMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostMInclude | null
    /**
     * Filter, which PostM to fetch.
     */
    where: PostMWhereUniqueInput
  }


  /**
   * PostM base type for findFirst actions
   */
  export type PostMFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the PostM
     */
    select?: PostMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostMInclude | null
    /**
     * Filter, which PostM to fetch.
     */
    where?: PostMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostMS to fetch.
     */
    orderBy?: Enumerable<PostMOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostMS.
     */
    cursor?: PostMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostMS.
     */
    distinct?: Enumerable<PostMScalarFieldEnum>
  }

  /**
   * PostM findFirst
   */
  export interface PostMFindFirstArgs extends PostMFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PostM findFirstOrThrow
   */
  export type PostMFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PostM
     */
    select?: PostMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostMInclude | null
    /**
     * Filter, which PostM to fetch.
     */
    where?: PostMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostMS to fetch.
     */
    orderBy?: Enumerable<PostMOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostMS.
     */
    cursor?: PostMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostMS.
     */
    distinct?: Enumerable<PostMScalarFieldEnum>
  }


  /**
   * PostM findMany
   */
  export type PostMFindManyArgs = {
    /**
     * Select specific fields to fetch from the PostM
     */
    select?: PostMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostMInclude | null
    /**
     * Filter, which PostMS to fetch.
     */
    where?: PostMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostMS to fetch.
     */
    orderBy?: Enumerable<PostMOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostMS.
     */
    cursor?: PostMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostMS.
     */
    skip?: number
    distinct?: Enumerable<PostMScalarFieldEnum>
  }


  /**
   * PostM create
   */
  export type PostMCreateArgs = {
    /**
     * Select specific fields to fetch from the PostM
     */
    select?: PostMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostMInclude | null
    /**
     * The data needed to create a PostM.
     */
    data: XOR<PostMCreateInput, PostMUncheckedCreateInput>
  }


  /**
   * PostM createMany
   */
  export type PostMCreateManyArgs = {
    /**
     * The data used to create many PostMS.
     */
    data: Enumerable<PostMCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PostM update
   */
  export type PostMUpdateArgs = {
    /**
     * Select specific fields to fetch from the PostM
     */
    select?: PostMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostMInclude | null
    /**
     * The data needed to update a PostM.
     */
    data: XOR<PostMUpdateInput, PostMUncheckedUpdateInput>
    /**
     * Choose, which PostM to update.
     */
    where: PostMWhereUniqueInput
  }


  /**
   * PostM updateMany
   */
  export type PostMUpdateManyArgs = {
    /**
     * The data used to update PostMS.
     */
    data: XOR<PostMUpdateManyMutationInput, PostMUncheckedUpdateManyInput>
    /**
     * Filter which PostMS to update
     */
    where?: PostMWhereInput
  }


  /**
   * PostM upsert
   */
  export type PostMUpsertArgs = {
    /**
     * Select specific fields to fetch from the PostM
     */
    select?: PostMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostMInclude | null
    /**
     * The filter to search for the PostM to update in case it exists.
     */
    where: PostMWhereUniqueInput
    /**
     * In case the PostM found by the `where` argument doesn't exist, create a new PostM with this data.
     */
    create: XOR<PostMCreateInput, PostMUncheckedCreateInput>
    /**
     * In case the PostM was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostMUpdateInput, PostMUncheckedUpdateInput>
  }


  /**
   * PostM delete
   */
  export type PostMDeleteArgs = {
    /**
     * Select specific fields to fetch from the PostM
     */
    select?: PostMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostMInclude | null
    /**
     * Filter which PostM to delete.
     */
    where: PostMWhereUniqueInput
  }


  /**
   * PostM deleteMany
   */
  export type PostMDeleteManyArgs = {
    /**
     * Filter which PostMS to delete
     */
    where?: PostMWhereInput
  }


  /**
   * PostM.reviews
   */
  export type PostM$reviewsArgs = {
    /**
     * Select specific fields to fetch from the ReviewM
     */
    select?: ReviewMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewMInclude | null
    where?: ReviewMWhereInput
    orderBy?: Enumerable<ReviewMOrderByWithRelationInput>
    cursor?: ReviewMWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReviewMScalarFieldEnum>
  }


  /**
   * PostM without action
   */
  export type PostMArgs = {
    /**
     * Select specific fields to fetch from the PostM
     */
    select?: PostMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostMInclude | null
  }



  /**
   * Model ReviewM
   */


  export type AggregateReviewM = {
    _count: ReviewMCountAggregateOutputType | null
    _avg: ReviewMAvgAggregateOutputType | null
    _sum: ReviewMSumAggregateOutputType | null
    _min: ReviewMMinAggregateOutputType | null
    _max: ReviewMMaxAggregateOutputType | null
  }

  export type ReviewMAvgAggregateOutputType = {
    id: number | null
    rating: number | null
    postId: number | null
    userId: number | null
  }

  export type ReviewMSumAggregateOutputType = {
    id: number | null
    rating: number | null
    postId: number | null
    userId: number | null
  }

  export type ReviewMMinAggregateOutputType = {
    id: number | null
    comment: string | null
    rating: number | null
    postId: number | null
    userId: number | null
  }

  export type ReviewMMaxAggregateOutputType = {
    id: number | null
    comment: string | null
    rating: number | null
    postId: number | null
    userId: number | null
  }

  export type ReviewMCountAggregateOutputType = {
    id: number
    comment: number
    rating: number
    postId: number
    userId: number
    _all: number
  }


  export type ReviewMAvgAggregateInputType = {
    id?: true
    rating?: true
    postId?: true
    userId?: true
  }

  export type ReviewMSumAggregateInputType = {
    id?: true
    rating?: true
    postId?: true
    userId?: true
  }

  export type ReviewMMinAggregateInputType = {
    id?: true
    comment?: true
    rating?: true
    postId?: true
    userId?: true
  }

  export type ReviewMMaxAggregateInputType = {
    id?: true
    comment?: true
    rating?: true
    postId?: true
    userId?: true
  }

  export type ReviewMCountAggregateInputType = {
    id?: true
    comment?: true
    rating?: true
    postId?: true
    userId?: true
    _all?: true
  }

  export type ReviewMAggregateArgs = {
    /**
     * Filter which ReviewM to aggregate.
     */
    where?: ReviewMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewMS to fetch.
     */
    orderBy?: Enumerable<ReviewMOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReviewMS
    **/
    _count?: true | ReviewMCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewMAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewMSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMMaxAggregateInputType
  }

  export type GetReviewMAggregateType<T extends ReviewMAggregateArgs> = {
        [P in keyof T & keyof AggregateReviewM]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviewM[P]>
      : GetScalarType<T[P], AggregateReviewM[P]>
  }




  export type ReviewMGroupByArgs = {
    where?: ReviewMWhereInput
    orderBy?: Enumerable<ReviewMOrderByWithAggregationInput>
    by: ReviewMScalarFieldEnum[]
    having?: ReviewMScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewMCountAggregateInputType | true
    _avg?: ReviewMAvgAggregateInputType
    _sum?: ReviewMSumAggregateInputType
    _min?: ReviewMMinAggregateInputType
    _max?: ReviewMMaxAggregateInputType
  }


  export type ReviewMGroupByOutputType = {
    id: number
    comment: string
    rating: number
    postId: number
    userId: number
    _count: ReviewMCountAggregateOutputType | null
    _avg: ReviewMAvgAggregateOutputType | null
    _sum: ReviewMSumAggregateOutputType | null
    _min: ReviewMMinAggregateOutputType | null
    _max: ReviewMMaxAggregateOutputType | null
  }

  type GetReviewMGroupByPayload<T extends ReviewMGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ReviewMGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewMGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewMGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewMGroupByOutputType[P]>
        }
      >
    >


  export type ReviewMSelect = {
    id?: boolean
    comment?: boolean
    rating?: boolean
    postId?: boolean
    userId?: boolean
    post?: boolean | PostMArgs
    user?: boolean | UserArgs
  }


  export type ReviewMInclude = {
    post?: boolean | PostMArgs
    user?: boolean | UserArgs
  }

  export type ReviewMGetPayload<S extends boolean | null | undefined | ReviewMArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ReviewM :
    S extends undefined ? never :
    S extends { include: any } & (ReviewMArgs | ReviewMFindManyArgs)
    ? ReviewM  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? PostMGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ReviewMArgs | ReviewMFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? PostMGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof ReviewM ? ReviewM[P] : never
  } 
      : ReviewM


  type ReviewMCountArgs = 
    Omit<ReviewMFindManyArgs, 'select' | 'include'> & {
      select?: ReviewMCountAggregateInputType | true
    }

  export interface ReviewMDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ReviewM that matches the filter.
     * @param {ReviewMFindUniqueArgs} args - Arguments to find a ReviewM
     * @example
     * // Get one ReviewM
     * const reviewM = await prisma.reviewM.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewMFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReviewMFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ReviewM'> extends True ? Prisma__ReviewMClient<ReviewMGetPayload<T>> : Prisma__ReviewMClient<ReviewMGetPayload<T> | null, null>

    /**
     * Find one ReviewM that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReviewMFindUniqueOrThrowArgs} args - Arguments to find a ReviewM
     * @example
     * // Get one ReviewM
     * const reviewM = await prisma.reviewM.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReviewMFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReviewMFindUniqueOrThrowArgs>
    ): Prisma__ReviewMClient<ReviewMGetPayload<T>>

    /**
     * Find the first ReviewM that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMFindFirstArgs} args - Arguments to find a ReviewM
     * @example
     * // Get one ReviewM
     * const reviewM = await prisma.reviewM.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewMFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReviewMFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ReviewM'> extends True ? Prisma__ReviewMClient<ReviewMGetPayload<T>> : Prisma__ReviewMClient<ReviewMGetPayload<T> | null, null>

    /**
     * Find the first ReviewM that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMFindFirstOrThrowArgs} args - Arguments to find a ReviewM
     * @example
     * // Get one ReviewM
     * const reviewM = await prisma.reviewM.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReviewMFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReviewMFindFirstOrThrowArgs>
    ): Prisma__ReviewMClient<ReviewMGetPayload<T>>

    /**
     * Find zero or more ReviewMS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReviewMS
     * const reviewMS = await prisma.reviewM.findMany()
     * 
     * // Get first 10 ReviewMS
     * const reviewMS = await prisma.reviewM.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewMWithIdOnly = await prisma.reviewM.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReviewMFindManyArgs>(
      args?: SelectSubset<T, ReviewMFindManyArgs>
    ): Prisma.PrismaPromise<Array<ReviewMGetPayload<T>>>

    /**
     * Create a ReviewM.
     * @param {ReviewMCreateArgs} args - Arguments to create a ReviewM.
     * @example
     * // Create one ReviewM
     * const ReviewM = await prisma.reviewM.create({
     *   data: {
     *     // ... data to create a ReviewM
     *   }
     * })
     * 
    **/
    create<T extends ReviewMCreateArgs>(
      args: SelectSubset<T, ReviewMCreateArgs>
    ): Prisma__ReviewMClient<ReviewMGetPayload<T>>

    /**
     * Create many ReviewMS.
     *     @param {ReviewMCreateManyArgs} args - Arguments to create many ReviewMS.
     *     @example
     *     // Create many ReviewMS
     *     const reviewM = await prisma.reviewM.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReviewMCreateManyArgs>(
      args?: SelectSubset<T, ReviewMCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ReviewM.
     * @param {ReviewMDeleteArgs} args - Arguments to delete one ReviewM.
     * @example
     * // Delete one ReviewM
     * const ReviewM = await prisma.reviewM.delete({
     *   where: {
     *     // ... filter to delete one ReviewM
     *   }
     * })
     * 
    **/
    delete<T extends ReviewMDeleteArgs>(
      args: SelectSubset<T, ReviewMDeleteArgs>
    ): Prisma__ReviewMClient<ReviewMGetPayload<T>>

    /**
     * Update one ReviewM.
     * @param {ReviewMUpdateArgs} args - Arguments to update one ReviewM.
     * @example
     * // Update one ReviewM
     * const reviewM = await prisma.reviewM.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewMUpdateArgs>(
      args: SelectSubset<T, ReviewMUpdateArgs>
    ): Prisma__ReviewMClient<ReviewMGetPayload<T>>

    /**
     * Delete zero or more ReviewMS.
     * @param {ReviewMDeleteManyArgs} args - Arguments to filter ReviewMS to delete.
     * @example
     * // Delete a few ReviewMS
     * const { count } = await prisma.reviewM.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewMDeleteManyArgs>(
      args?: SelectSubset<T, ReviewMDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReviewMS
     * const reviewM = await prisma.reviewM.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewMUpdateManyArgs>(
      args: SelectSubset<T, ReviewMUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReviewM.
     * @param {ReviewMUpsertArgs} args - Arguments to update or create a ReviewM.
     * @example
     * // Update or create a ReviewM
     * const reviewM = await prisma.reviewM.upsert({
     *   create: {
     *     // ... data to create a ReviewM
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReviewM we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewMUpsertArgs>(
      args: SelectSubset<T, ReviewMUpsertArgs>
    ): Prisma__ReviewMClient<ReviewMGetPayload<T>>

    /**
     * Count the number of ReviewMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMCountArgs} args - Arguments to filter ReviewMS to count.
     * @example
     * // Count the number of ReviewMS
     * const count = await prisma.reviewM.count({
     *   where: {
     *     // ... the filter for the ReviewMS we want to count
     *   }
     * })
    **/
    count<T extends ReviewMCountArgs>(
      args?: Subset<T, ReviewMCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewMCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReviewM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewMAggregateArgs>(args: Subset<T, ReviewMAggregateArgs>): Prisma.PrismaPromise<GetReviewMAggregateType<T>>

    /**
     * Group by ReviewM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewMGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewMGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewMGroupByArgs['orderBy'] }
        : { orderBy?: ReviewMGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewMGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewMGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ReviewM.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReviewMClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends PostMArgs= {}>(args?: Subset<T, PostMArgs>): Prisma__PostMClient<PostMGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ReviewM base type for findUnique actions
   */
  export type ReviewMFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ReviewM
     */
    select?: ReviewMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewMInclude | null
    /**
     * Filter, which ReviewM to fetch.
     */
    where: ReviewMWhereUniqueInput
  }

  /**
   * ReviewM findUnique
   */
  export interface ReviewMFindUniqueArgs extends ReviewMFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ReviewM findUniqueOrThrow
   */
  export type ReviewMFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ReviewM
     */
    select?: ReviewMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewMInclude | null
    /**
     * Filter, which ReviewM to fetch.
     */
    where: ReviewMWhereUniqueInput
  }


  /**
   * ReviewM base type for findFirst actions
   */
  export type ReviewMFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ReviewM
     */
    select?: ReviewMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewMInclude | null
    /**
     * Filter, which ReviewM to fetch.
     */
    where?: ReviewMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewMS to fetch.
     */
    orderBy?: Enumerable<ReviewMOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewMS.
     */
    cursor?: ReviewMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewMS.
     */
    distinct?: Enumerable<ReviewMScalarFieldEnum>
  }

  /**
   * ReviewM findFirst
   */
  export interface ReviewMFindFirstArgs extends ReviewMFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ReviewM findFirstOrThrow
   */
  export type ReviewMFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ReviewM
     */
    select?: ReviewMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewMInclude | null
    /**
     * Filter, which ReviewM to fetch.
     */
    where?: ReviewMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewMS to fetch.
     */
    orderBy?: Enumerable<ReviewMOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewMS.
     */
    cursor?: ReviewMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewMS.
     */
    distinct?: Enumerable<ReviewMScalarFieldEnum>
  }


  /**
   * ReviewM findMany
   */
  export type ReviewMFindManyArgs = {
    /**
     * Select specific fields to fetch from the ReviewM
     */
    select?: ReviewMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewMInclude | null
    /**
     * Filter, which ReviewMS to fetch.
     */
    where?: ReviewMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewMS to fetch.
     */
    orderBy?: Enumerable<ReviewMOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReviewMS.
     */
    cursor?: ReviewMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewMS.
     */
    skip?: number
    distinct?: Enumerable<ReviewMScalarFieldEnum>
  }


  /**
   * ReviewM create
   */
  export type ReviewMCreateArgs = {
    /**
     * Select specific fields to fetch from the ReviewM
     */
    select?: ReviewMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewMInclude | null
    /**
     * The data needed to create a ReviewM.
     */
    data: XOR<ReviewMCreateInput, ReviewMUncheckedCreateInput>
  }


  /**
   * ReviewM createMany
   */
  export type ReviewMCreateManyArgs = {
    /**
     * The data used to create many ReviewMS.
     */
    data: Enumerable<ReviewMCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ReviewM update
   */
  export type ReviewMUpdateArgs = {
    /**
     * Select specific fields to fetch from the ReviewM
     */
    select?: ReviewMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewMInclude | null
    /**
     * The data needed to update a ReviewM.
     */
    data: XOR<ReviewMUpdateInput, ReviewMUncheckedUpdateInput>
    /**
     * Choose, which ReviewM to update.
     */
    where: ReviewMWhereUniqueInput
  }


  /**
   * ReviewM updateMany
   */
  export type ReviewMUpdateManyArgs = {
    /**
     * The data used to update ReviewMS.
     */
    data: XOR<ReviewMUpdateManyMutationInput, ReviewMUncheckedUpdateManyInput>
    /**
     * Filter which ReviewMS to update
     */
    where?: ReviewMWhereInput
  }


  /**
   * ReviewM upsert
   */
  export type ReviewMUpsertArgs = {
    /**
     * Select specific fields to fetch from the ReviewM
     */
    select?: ReviewMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewMInclude | null
    /**
     * The filter to search for the ReviewM to update in case it exists.
     */
    where: ReviewMWhereUniqueInput
    /**
     * In case the ReviewM found by the `where` argument doesn't exist, create a new ReviewM with this data.
     */
    create: XOR<ReviewMCreateInput, ReviewMUncheckedCreateInput>
    /**
     * In case the ReviewM was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewMUpdateInput, ReviewMUncheckedUpdateInput>
  }


  /**
   * ReviewM delete
   */
  export type ReviewMDeleteArgs = {
    /**
     * Select specific fields to fetch from the ReviewM
     */
    select?: ReviewMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewMInclude | null
    /**
     * Filter which ReviewM to delete.
     */
    where: ReviewMWhereUniqueInput
  }


  /**
   * ReviewM deleteMany
   */
  export type ReviewMDeleteManyArgs = {
    /**
     * Filter which ReviewMS to delete
     */
    where?: ReviewMWhereInput
  }


  /**
   * ReviewM without action
   */
  export type ReviewMArgs = {
    /**
     * Select specific fields to fetch from the ReviewM
     */
    select?: ReviewMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReviewMInclude | null
  }



  /**
   * Model Country
   */


  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryAvgAggregateOutputType = {
    id: number | null
  }

  export type CountrySumAggregateOutputType = {
    id: number | null
  }

  export type CountryMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CountryMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CountryCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CountryAvgAggregateInputType = {
    id?: true
  }

  export type CountrySumAggregateInputType = {
    id?: true
  }

  export type CountryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CountryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CountryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CountryAggregateArgs = {
    /**
     * Filter which Country to aggregate.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: Enumerable<CountryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type CountryGroupByArgs = {
    where?: CountryWhereInput
    orderBy?: Enumerable<CountryOrderByWithAggregationInput>
    by: CountryScalarFieldEnum[]
    having?: CountryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _avg?: CountryAvgAggregateInputType
    _sum?: CountrySumAggregateInputType
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }


  export type CountryGroupByOutputType = {
    id: number
    name: string
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type CountrySelect = {
    id?: boolean
    name?: boolean
  }


  export type CountryGetPayload<S extends boolean | null | undefined | CountryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Country :
    S extends undefined ? never :
    S extends { include: any } & (CountryArgs | CountryFindManyArgs)
    ? Country 
    : S extends { select: any } & (CountryArgs | CountryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Country ? Country[P] : never
  } 
      : Country


  type CountryCountArgs = 
    Omit<CountryFindManyArgs, 'select' | 'include'> & {
      select?: CountryCountAggregateInputType | true
    }

  export interface CountryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Country that matches the filter.
     * @param {CountryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CountryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CountryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Country'> extends True ? Prisma__CountryClient<CountryGetPayload<T>> : Prisma__CountryClient<CountryGetPayload<T> | null, null>

    /**
     * Find one Country that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CountryFindUniqueOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CountryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CountryFindUniqueOrThrowArgs>
    ): Prisma__CountryClient<CountryGetPayload<T>>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CountryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CountryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Country'> extends True ? Prisma__CountryClient<CountryGetPayload<T>> : Prisma__CountryClient<CountryGetPayload<T> | null, null>

    /**
     * Find the first Country that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CountryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CountryFindFirstOrThrowArgs>
    ): Prisma__CountryClient<CountryGetPayload<T>>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countryWithIdOnly = await prisma.country.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CountryFindManyArgs>(
      args?: SelectSubset<T, CountryFindManyArgs>
    ): Prisma.PrismaPromise<Array<CountryGetPayload<T>>>

    /**
     * Create a Country.
     * @param {CountryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
    **/
    create<T extends CountryCreateArgs>(
      args: SelectSubset<T, CountryCreateArgs>
    ): Prisma__CountryClient<CountryGetPayload<T>>

    /**
     * Create many Countries.
     *     @param {CountryCreateManyArgs} args - Arguments to create many Countries.
     *     @example
     *     // Create many Countries
     *     const country = await prisma.country.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CountryCreateManyArgs>(
      args?: SelectSubset<T, CountryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Country.
     * @param {CountryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
    **/
    delete<T extends CountryDeleteArgs>(
      args: SelectSubset<T, CountryDeleteArgs>
    ): Prisma__CountryClient<CountryGetPayload<T>>

    /**
     * Update one Country.
     * @param {CountryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CountryUpdateArgs>(
      args: SelectSubset<T, CountryUpdateArgs>
    ): Prisma__CountryClient<CountryGetPayload<T>>

    /**
     * Delete zero or more Countries.
     * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CountryDeleteManyArgs>(
      args?: SelectSubset<T, CountryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CountryUpdateManyArgs>(
      args: SelectSubset<T, CountryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Country.
     * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
    **/
    upsert<T extends CountryUpsertArgs>(
      args: SelectSubset<T, CountryUpsertArgs>
    ): Prisma__CountryClient<CountryGetPayload<T>>

    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountryCountArgs>(
      args?: Subset<T, CountryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): Prisma.PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CountryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Country base type for findUnique actions
   */
  export type CountryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findUnique
   */
  export interface CountryFindUniqueArgs extends CountryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Country findUniqueOrThrow
   */
  export type CountryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }


  /**
   * Country base type for findFirst actions
   */
  export type CountryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: Enumerable<CountryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: Enumerable<CountryScalarFieldEnum>
  }

  /**
   * Country findFirst
   */
  export interface CountryFindFirstArgs extends CountryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Country findFirstOrThrow
   */
  export type CountryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: Enumerable<CountryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: Enumerable<CountryScalarFieldEnum>
  }


  /**
   * Country findMany
   */
  export type CountryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: Enumerable<CountryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    distinct?: Enumerable<CountryScalarFieldEnum>
  }


  /**
   * Country create
   */
  export type CountryCreateArgs = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect | null
    /**
     * The data needed to create a Country.
     */
    data: XOR<CountryCreateInput, CountryUncheckedCreateInput>
  }


  /**
   * Country createMany
   */
  export type CountryCreateManyArgs = {
    /**
     * The data used to create many Countries.
     */
    data: Enumerable<CountryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Country update
   */
  export type CountryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect | null
    /**
     * The data needed to update a Country.
     */
    data: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
    /**
     * Choose, which Country to update.
     */
    where: CountryWhereUniqueInput
  }


  /**
   * Country updateMany
   */
  export type CountryUpdateManyArgs = {
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
  }


  /**
   * Country upsert
   */
  export type CountryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect | null
    /**
     * The filter to search for the Country to update in case it exists.
     */
    where: CountryWhereUniqueInput
    /**
     * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
     */
    create: XOR<CountryCreateInput, CountryUncheckedCreateInput>
    /**
     * In case the Country was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
  }


  /**
   * Country delete
   */
  export type CountryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect | null
    /**
     * Filter which Country to delete.
     */
    where: CountryWhereUniqueInput
  }


  /**
   * Country deleteMany
   */
  export type CountryDeleteManyArgs = {
    /**
     * Filter which Countries to delete
     */
    where?: CountryWhereInput
  }


  /**
   * Country without action
   */
  export type CountryArgs = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect | null
  }



  /**
   * Enums
   */

  export const CardScalarFieldEnum: {
    id: 'id',
    last4: 'last4',
    brand: 'brand',
    expiration: 'expiration',
    paymentMethodId: 'paymentMethodId',
    userId: 'userId'
  };

  export type CardScalarFieldEnum = (typeof CardScalarFieldEnum)[keyof typeof CardScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    text: 'text',
    postId: 'postId',
    userId: 'userId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const CommunityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    skill: 'skill'
  };

  export type CommunityScalarFieldEnum = (typeof CommunityScalarFieldEnum)[keyof typeof CommunityScalarFieldEnum]


  export const CountryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const FriendshipScalarFieldEnum: {
    id: 'id',
    requestorId: 'requestorId',
    respondentId: 'respondentId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FriendshipScalarFieldEnum = (typeof FriendshipScalarFieldEnum)[keyof typeof FriendshipScalarFieldEnum]


  export const MembershipScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    communityId: 'communityId',
    isAdmin: 'isAdmin',
    isAccepted: 'isAccepted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MembershipScalarFieldEnum = (typeof MembershipScalarFieldEnum)[keyof typeof MembershipScalarFieldEnum]


  export const PackScalarFieldEnum: {
    id: 'id',
    name: 'name',
    points: 'points',
    price: 'price'
  };

  export type PackScalarFieldEnum = (typeof PackScalarFieldEnum)[keyof typeof PackScalarFieldEnum]


  export const PostMScalarFieldEnum: {
    id: 'id',
    title: 'title',
    price: 'price',
    image: 'image',
    description: 'description',
    skill: 'skill',
    userId: 'userId'
  };

  export type PostMScalarFieldEnum = (typeof PostMScalarFieldEnum)[keyof typeof PostMScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    image: 'image',
    title: 'title',
    skill: 'skill',
    desc: 'desc',
    likes: 'likes',
    userId: 'userId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ReviewMScalarFieldEnum: {
    id: 'id',
    comment: 'comment',
    rating: 'rating',
    postId: 'postId',
    userId: 'userId'
  };

  export type ReviewMScalarFieldEnum = (typeof ReviewMScalarFieldEnum)[keyof typeof ReviewMScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    rating: 'rating',
    postId: 'postId',
    userId: 'userId'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    name: 'name',
    email: 'email',
    address: 'address',
    profileImage: 'profileImage',
    budge: 'budge',
    points: 'points',
    age: 'age',
    skills: 'skills',
    hobbies: 'hobbies',
    details: 'details',
    descriptions: 'descriptions',
    phoneNumber: 'phoneNumber',
    gender: 'gender',
    level: 'level',
    createdAt: 'createdAt',
    isBanned: 'isBanned',
    isAdmin: 'isAdmin'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    uid?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    address?: StringFilter | string
    profileImage?: StringNullableFilter | string | null
    budge?: StringNullableFilter | string | null
    points?: IntFilter | number
    age?: IntFilter | number
    skills?: StringNullableListFilter
    hobbies?: StringNullableListFilter
    details?: StringNullableFilter | string | null
    descriptions?: StringNullableFilter | string | null
    phoneNumber?: StringNullableFilter | string | null
    gender?: StringNullableFilter | string | null
    level?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    isBanned?: BoolFilter | boolean
    isAdmin?: BoolFilter | boolean
    cards?: CardListRelationFilter
    sentRequests?: FriendshipListRelationFilter
    receivedRequests?: FriendshipListRelationFilter
    posts?: PostListRelationFilter
    comments?: CommentListRelationFilter
    reviews?: ReviewListRelationFilter
    memberships?: MembershipListRelationFilter
    PostM?: PostMListRelationFilter
    ReviewM?: ReviewMListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    address?: SortOrder
    profileImage?: SortOrder
    budge?: SortOrder
    points?: SortOrder
    age?: SortOrder
    skills?: SortOrder
    hobbies?: SortOrder
    details?: SortOrder
    descriptions?: SortOrder
    phoneNumber?: SortOrder
    gender?: SortOrder
    level?: SortOrder
    createdAt?: SortOrder
    isBanned?: SortOrder
    isAdmin?: SortOrder
    cards?: CardOrderByRelationAggregateInput
    sentRequests?: FriendshipOrderByRelationAggregateInput
    receivedRequests?: FriendshipOrderByRelationAggregateInput
    posts?: PostOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
    memberships?: MembershipOrderByRelationAggregateInput
    PostM?: PostMOrderByRelationAggregateInput
    ReviewM?: ReviewMOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    uid?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    address?: SortOrder
    profileImage?: SortOrder
    budge?: SortOrder
    points?: SortOrder
    age?: SortOrder
    skills?: SortOrder
    hobbies?: SortOrder
    details?: SortOrder
    descriptions?: SortOrder
    phoneNumber?: SortOrder
    gender?: SortOrder
    level?: SortOrder
    createdAt?: SortOrder
    isBanned?: SortOrder
    isAdmin?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    uid?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    profileImage?: StringNullableWithAggregatesFilter | string | null
    budge?: StringNullableWithAggregatesFilter | string | null
    points?: IntWithAggregatesFilter | number
    age?: IntWithAggregatesFilter | number
    skills?: StringNullableListFilter
    hobbies?: StringNullableListFilter
    details?: StringNullableWithAggregatesFilter | string | null
    descriptions?: StringNullableWithAggregatesFilter | string | null
    phoneNumber?: StringNullableWithAggregatesFilter | string | null
    gender?: StringNullableWithAggregatesFilter | string | null
    level?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    isBanned?: BoolWithAggregatesFilter | boolean
    isAdmin?: BoolWithAggregatesFilter | boolean
  }

  export type CardWhereInput = {
    AND?: Enumerable<CardWhereInput>
    OR?: Enumerable<CardWhereInput>
    NOT?: Enumerable<CardWhereInput>
    id?: IntFilter | number
    last4?: StringFilter | string
    brand?: StringFilter | string
    expiration?: StringFilter | string
    paymentMethodId?: StringNullableFilter | string | null
    userId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CardOrderByWithRelationInput = {
    id?: SortOrder
    last4?: SortOrder
    brand?: SortOrder
    expiration?: SortOrder
    paymentMethodId?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CardWhereUniqueInput = {
    id?: number
  }

  export type CardOrderByWithAggregationInput = {
    id?: SortOrder
    last4?: SortOrder
    brand?: SortOrder
    expiration?: SortOrder
    paymentMethodId?: SortOrder
    userId?: SortOrder
    _count?: CardCountOrderByAggregateInput
    _avg?: CardAvgOrderByAggregateInput
    _max?: CardMaxOrderByAggregateInput
    _min?: CardMinOrderByAggregateInput
    _sum?: CardSumOrderByAggregateInput
  }

  export type CardScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CardScalarWhereWithAggregatesInput>
    OR?: Enumerable<CardScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CardScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    last4?: StringWithAggregatesFilter | string
    brand?: StringWithAggregatesFilter | string
    expiration?: StringWithAggregatesFilter | string
    paymentMethodId?: StringNullableWithAggregatesFilter | string | null
    userId?: IntWithAggregatesFilter | number
  }

  export type PackWhereInput = {
    AND?: Enumerable<PackWhereInput>
    OR?: Enumerable<PackWhereInput>
    NOT?: Enumerable<PackWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    points?: IntFilter | number
    price?: FloatFilter | number
  }

  export type PackOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    points?: SortOrder
    price?: SortOrder
  }

  export type PackWhereUniqueInput = {
    id?: number
  }

  export type PackOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    points?: SortOrder
    price?: SortOrder
    _count?: PackCountOrderByAggregateInput
    _avg?: PackAvgOrderByAggregateInput
    _max?: PackMaxOrderByAggregateInput
    _min?: PackMinOrderByAggregateInput
    _sum?: PackSumOrderByAggregateInput
  }

  export type PackScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PackScalarWhereWithAggregatesInput>
    OR?: Enumerable<PackScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PackScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    points?: IntWithAggregatesFilter | number
    price?: FloatWithAggregatesFilter | number
  }

  export type CommunityWhereInput = {
    AND?: Enumerable<CommunityWhereInput>
    OR?: Enumerable<CommunityWhereInput>
    NOT?: Enumerable<CommunityWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    skill?: StringFilter | string
    memberships?: MembershipListRelationFilter
  }

  export type CommunityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    skill?: SortOrder
    memberships?: MembershipOrderByRelationAggregateInput
  }

  export type CommunityWhereUniqueInput = {
    id?: number
  }

  export type CommunityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    skill?: SortOrder
    _count?: CommunityCountOrderByAggregateInput
    _avg?: CommunityAvgOrderByAggregateInput
    _max?: CommunityMaxOrderByAggregateInput
    _min?: CommunityMinOrderByAggregateInput
    _sum?: CommunitySumOrderByAggregateInput
  }

  export type CommunityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CommunityScalarWhereWithAggregatesInput>
    OR?: Enumerable<CommunityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CommunityScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    skill?: StringWithAggregatesFilter | string
  }

  export type PostWhereInput = {
    AND?: Enumerable<PostWhereInput>
    OR?: Enumerable<PostWhereInput>
    NOT?: Enumerable<PostWhereInput>
    id?: IntFilter | number
    image?: StringFilter | string
    title?: StringFilter | string
    skill?: StringFilter | string
    desc?: StringFilter | string
    likes?: IntFilter | number
    userId?: IntFilter | number
    comments?: CommentListRelationFilter
    reviews?: ReviewListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    skill?: SortOrder
    desc?: SortOrder
    likes?: SortOrder
    userId?: SortOrder
    comments?: CommentOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type PostWhereUniqueInput = {
    id?: number
  }

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    skill?: SortOrder
    desc?: SortOrder
    likes?: SortOrder
    userId?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    image?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    skill?: StringWithAggregatesFilter | string
    desc?: StringWithAggregatesFilter | string
    likes?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
  }

  export type CommentWhereInput = {
    AND?: Enumerable<CommentWhereInput>
    OR?: Enumerable<CommentWhereInput>
    NOT?: Enumerable<CommentWhereInput>
    id?: IntFilter | number
    text?: StringFilter | string
    postId?: IntFilter | number
    userId?: IntFilter | number
    post?: XOR<PostRelationFilter, PostWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    post?: PostOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = {
    id?: number
  }

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<CommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CommentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    text?: StringWithAggregatesFilter | string
    postId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
  }

  export type ReviewWhereInput = {
    AND?: Enumerable<ReviewWhereInput>
    OR?: Enumerable<ReviewWhereInput>
    NOT?: Enumerable<ReviewWhereInput>
    id?: IntFilter | number
    rating?: IntFilter | number
    postId?: IntFilter | number
    userId?: IntFilter | number
    post?: XOR<PostRelationFilter, PostWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    post?: PostOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = {
    id?: number
  }

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReviewScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReviewScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReviewScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    rating?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
  }

  export type FriendshipWhereInput = {
    AND?: Enumerable<FriendshipWhereInput>
    OR?: Enumerable<FriendshipWhereInput>
    NOT?: Enumerable<FriendshipWhereInput>
    id?: IntFilter | number
    requestorId?: IntFilter | number
    respondentId?: IntFilter | number
    status?: EnumFriendshipStatusFilter | FriendshipStatus
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    requestor?: XOR<UserRelationFilter, UserWhereInput>
    respondent?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FriendshipOrderByWithRelationInput = {
    id?: SortOrder
    requestorId?: SortOrder
    respondentId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requestor?: UserOrderByWithRelationInput
    respondent?: UserOrderByWithRelationInput
  }

  export type FriendshipWhereUniqueInput = {
    id?: number
  }

  export type FriendshipOrderByWithAggregationInput = {
    id?: SortOrder
    requestorId?: SortOrder
    respondentId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FriendshipCountOrderByAggregateInput
    _avg?: FriendshipAvgOrderByAggregateInput
    _max?: FriendshipMaxOrderByAggregateInput
    _min?: FriendshipMinOrderByAggregateInput
    _sum?: FriendshipSumOrderByAggregateInput
  }

  export type FriendshipScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FriendshipScalarWhereWithAggregatesInput>
    OR?: Enumerable<FriendshipScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FriendshipScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    requestorId?: IntWithAggregatesFilter | number
    respondentId?: IntWithAggregatesFilter | number
    status?: EnumFriendshipStatusWithAggregatesFilter | FriendshipStatus
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MembershipWhereInput = {
    AND?: Enumerable<MembershipWhereInput>
    OR?: Enumerable<MembershipWhereInput>
    NOT?: Enumerable<MembershipWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    communityId?: IntFilter | number
    isAdmin?: BoolFilter | boolean
    isAccepted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
  }

  export type MembershipOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
    isAdmin?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    community?: CommunityOrderByWithRelationInput
  }

  export type MembershipWhereUniqueInput = {
    id?: number
  }

  export type MembershipOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
    isAdmin?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MembershipCountOrderByAggregateInput
    _avg?: MembershipAvgOrderByAggregateInput
    _max?: MembershipMaxOrderByAggregateInput
    _min?: MembershipMinOrderByAggregateInput
    _sum?: MembershipSumOrderByAggregateInput
  }

  export type MembershipScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MembershipScalarWhereWithAggregatesInput>
    OR?: Enumerable<MembershipScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MembershipScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    communityId?: IntWithAggregatesFilter | number
    isAdmin?: BoolWithAggregatesFilter | boolean
    isAccepted?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PostMWhereInput = {
    AND?: Enumerable<PostMWhereInput>
    OR?: Enumerable<PostMWhereInput>
    NOT?: Enumerable<PostMWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    price?: FloatFilter | number
    image?: StringNullableListFilter
    description?: StringFilter | string
    skill?: StringFilter | string
    userId?: IntFilter | number
    reviews?: ReviewMListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PostMOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    image?: SortOrder
    description?: SortOrder
    skill?: SortOrder
    userId?: SortOrder
    reviews?: ReviewMOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type PostMWhereUniqueInput = {
    id?: number
  }

  export type PostMOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    image?: SortOrder
    description?: SortOrder
    skill?: SortOrder
    userId?: SortOrder
    _count?: PostMCountOrderByAggregateInput
    _avg?: PostMAvgOrderByAggregateInput
    _max?: PostMMaxOrderByAggregateInput
    _min?: PostMMinOrderByAggregateInput
    _sum?: PostMSumOrderByAggregateInput
  }

  export type PostMScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostMScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostMScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostMScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    price?: FloatWithAggregatesFilter | number
    image?: StringNullableListFilter
    description?: StringWithAggregatesFilter | string
    skill?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
  }

  export type ReviewMWhereInput = {
    AND?: Enumerable<ReviewMWhereInput>
    OR?: Enumerable<ReviewMWhereInput>
    NOT?: Enumerable<ReviewMWhereInput>
    id?: IntFilter | number
    comment?: StringFilter | string
    rating?: IntFilter | number
    postId?: IntFilter | number
    userId?: IntFilter | number
    post?: XOR<PostMRelationFilter, PostMWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ReviewMOrderByWithRelationInput = {
    id?: SortOrder
    comment?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    post?: PostMOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ReviewMWhereUniqueInput = {
    id?: number
  }

  export type ReviewMOrderByWithAggregationInput = {
    id?: SortOrder
    comment?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    _count?: ReviewMCountOrderByAggregateInput
    _avg?: ReviewMAvgOrderByAggregateInput
    _max?: ReviewMMaxOrderByAggregateInput
    _min?: ReviewMMinOrderByAggregateInput
    _sum?: ReviewMSumOrderByAggregateInput
  }

  export type ReviewMScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReviewMScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReviewMScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReviewMScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    comment?: StringWithAggregatesFilter | string
    rating?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
  }

  export type CountryWhereInput = {
    AND?: Enumerable<CountryWhereInput>
    OR?: Enumerable<CountryWhereInput>
    NOT?: Enumerable<CountryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
  }

  export type CountryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CountryWhereUniqueInput = {
    id?: number
  }

  export type CountryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CountryCountOrderByAggregateInput
    _avg?: CountryAvgOrderByAggregateInput
    _max?: CountryMaxOrderByAggregateInput
    _min?: CountryMinOrderByAggregateInput
    _sum?: CountrySumOrderByAggregateInput
  }

  export type CountryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CountryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CountryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CountryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipCreateNestedManyWithoutRespondentInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    memberships?: MembershipCreateNestedManyWithoutUserInput
    PostM?: PostMCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardUncheckedCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipUncheckedCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipUncheckedCreateNestedManyWithoutRespondentInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    memberships?: MembershipUncheckedCreateNestedManyWithoutUserInput
    PostM?: PostMUncheckedCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUpdateManyWithoutRespondentNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    memberships?: MembershipUpdateManyWithoutUserNestedInput
    PostM?: PostMUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUncheckedUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUncheckedUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUncheckedUpdateManyWithoutRespondentNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    memberships?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    PostM?: PostMUncheckedUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
  }

  export type UserUpdateManyMutationInput = {
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CardCreateInput = {
    last4: string
    brand: string
    expiration: string
    paymentMethodId?: string | null
    user: UserCreateNestedOneWithoutCardsInput
  }

  export type CardUncheckedCreateInput = {
    id?: number
    last4: string
    brand: string
    expiration: string
    paymentMethodId?: string | null
    userId: number
  }

  export type CardUpdateInput = {
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutCardsNestedInput
  }

  export type CardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CardCreateManyInput = {
    id?: number
    last4: string
    brand: string
    expiration: string
    paymentMethodId?: string | null
    userId: number
  }

  export type CardUpdateManyMutationInput = {
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PackCreateInput = {
    name: string
    points: number
    price: number
  }

  export type PackUncheckedCreateInput = {
    id?: number
    name: string
    points: number
    price: number
  }

  export type PackUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type PackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type PackCreateManyInput = {
    id?: number
    name: string
    points: number
    price: number
  }

  export type PackUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type PackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    points?: IntFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type CommunityCreateInput = {
    name: string
    skill: string
    memberships?: MembershipCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateInput = {
    id?: number
    name: string
    skill: string
    memberships?: MembershipUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    memberships?: MembershipUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    memberships?: MembershipUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityCreateManyInput = {
    id?: number
    name: string
    skill: string
  }

  export type CommunityUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
  }

  export type CommunityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
  }

  export type PostCreateInput = {
    image: string
    title: string
    skill: string
    desc: string
    likes: number
    comments?: CommentCreateNestedManyWithoutPostInput
    reviews?: ReviewCreateNestedManyWithoutPostInput
    user: UserCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    image: string
    title: string
    skill: string
    desc: string
    likes: number
    userId: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    comments?: CommentUpdateManyWithoutPostNestedInput
    reviews?: ReviewUpdateManyWithoutPostNestedInput
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: number
    image: string
    title: string
    skill: string
    desc: string
    likes: number
    userId: number
  }

  export type PostUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    text: string
    post: PostCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    text: string
    postId: number
    userId: number
  }

  export type CommentUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyInput = {
    id?: number
    text: string
    postId: number
    userId: number
  }

  export type CommentUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewCreateInput = {
    rating: number
    post: PostCreateNestedOneWithoutReviewsInput
    user: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: number
    rating: number
    postId: number
    userId: number
  }

  export type ReviewUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    post?: PostUpdateOneRequiredWithoutReviewsNestedInput
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewCreateManyInput = {
    id?: number
    rating: number
    postId: number
    userId: number
  }

  export type ReviewUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type FriendshipCreateInput = {
    status?: FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requestor: UserCreateNestedOneWithoutSentRequestsInput
    respondent: UserCreateNestedOneWithoutReceivedRequestsInput
  }

  export type FriendshipUncheckedCreateInput = {
    id?: number
    requestorId: number
    respondentId: number
    status?: FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendshipUpdateInput = {
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestor?: UserUpdateOneRequiredWithoutSentRequestsNestedInput
    respondent?: UserUpdateOneRequiredWithoutReceivedRequestsNestedInput
  }

  export type FriendshipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestorId?: IntFieldUpdateOperationsInput | number
    respondentId?: IntFieldUpdateOperationsInput | number
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipCreateManyInput = {
    id?: number
    requestorId: number
    respondentId: number
    status?: FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendshipUpdateManyMutationInput = {
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestorId?: IntFieldUpdateOperationsInput | number
    respondentId?: IntFieldUpdateOperationsInput | number
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MembershipCreateInput = {
    isAdmin?: boolean
    isAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMembershipsInput
    community: CommunityCreateNestedOneWithoutMembershipsInput
  }

  export type MembershipUncheckedCreateInput = {
    id?: number
    userId: number
    communityId: number
    isAdmin?: boolean
    isAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MembershipUpdateInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMembershipsNestedInput
    community?: CommunityUpdateOneRequiredWithoutMembershipsNestedInput
  }

  export type MembershipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    communityId?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MembershipCreateManyInput = {
    id?: number
    userId: number
    communityId: number
    isAdmin?: boolean
    isAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MembershipUpdateManyMutationInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MembershipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    communityId?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostMCreateInput = {
    title: string
    price: number
    image?: PostMCreateimageInput | Enumerable<string>
    description: string
    skill: string
    reviews?: ReviewMCreateNestedManyWithoutPostInput
    user: UserCreateNestedOneWithoutPostMInput
  }

  export type PostMUncheckedCreateInput = {
    id?: number
    title: string
    price: number
    image?: PostMCreateimageInput | Enumerable<string>
    description: string
    skill: string
    userId: number
    reviews?: ReviewMUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostMUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: PostMUpdateimageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    reviews?: ReviewMUpdateManyWithoutPostNestedInput
    user?: UserUpdateOneRequiredWithoutPostMNestedInput
  }

  export type PostMUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: PostMUpdateimageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewMUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostMCreateManyInput = {
    id?: number
    title: string
    price: number
    image?: PostMCreateimageInput | Enumerable<string>
    description: string
    skill: string
    userId: number
  }

  export type PostMUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: PostMUpdateimageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
  }

  export type PostMUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: PostMUpdateimageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewMCreateInput = {
    comment: string
    rating: number
    post: PostMCreateNestedOneWithoutReviewsInput
    user: UserCreateNestedOneWithoutReviewMInput
  }

  export type ReviewMUncheckedCreateInput = {
    id?: number
    comment: string
    rating: number
    postId: number
    userId: number
  }

  export type ReviewMUpdateInput = {
    comment?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    post?: PostMUpdateOneRequiredWithoutReviewsNestedInput
    user?: UserUpdateOneRequiredWithoutReviewMNestedInput
  }

  export type ReviewMUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewMCreateManyInput = {
    id?: number
    comment: string
    rating: number
    postId: number
    userId: number
  }

  export type ReviewMUpdateManyMutationInput = {
    comment?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewMUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CountryCreateInput = {
    name: string
  }

  export type CountryUncheckedCreateInput = {
    id?: number
    name: string
  }

  export type CountryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CountryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CountryCreateManyInput = {
    id?: number
    name: string
  }

  export type CountryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CountryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type CardListRelationFilter = {
    every?: CardWhereInput
    some?: CardWhereInput
    none?: CardWhereInput
  }

  export type FriendshipListRelationFilter = {
    every?: FriendshipWhereInput
    some?: FriendshipWhereInput
    none?: FriendshipWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type MembershipListRelationFilter = {
    every?: MembershipWhereInput
    some?: MembershipWhereInput
    none?: MembershipWhereInput
  }

  export type PostMListRelationFilter = {
    every?: PostMWhereInput
    some?: PostMWhereInput
    none?: PostMWhereInput
  }

  export type ReviewMListRelationFilter = {
    every?: ReviewMWhereInput
    some?: ReviewMWhereInput
    none?: ReviewMWhereInput
  }

  export type CardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FriendshipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MembershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostMOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewMOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    address?: SortOrder
    profileImage?: SortOrder
    budge?: SortOrder
    points?: SortOrder
    age?: SortOrder
    skills?: SortOrder
    hobbies?: SortOrder
    details?: SortOrder
    descriptions?: SortOrder
    phoneNumber?: SortOrder
    gender?: SortOrder
    level?: SortOrder
    createdAt?: SortOrder
    isBanned?: SortOrder
    isAdmin?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    age?: SortOrder
    level?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    address?: SortOrder
    profileImage?: SortOrder
    budge?: SortOrder
    points?: SortOrder
    age?: SortOrder
    details?: SortOrder
    descriptions?: SortOrder
    phoneNumber?: SortOrder
    gender?: SortOrder
    level?: SortOrder
    createdAt?: SortOrder
    isBanned?: SortOrder
    isAdmin?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    name?: SortOrder
    email?: SortOrder
    address?: SortOrder
    profileImage?: SortOrder
    budge?: SortOrder
    points?: SortOrder
    age?: SortOrder
    details?: SortOrder
    descriptions?: SortOrder
    phoneNumber?: SortOrder
    gender?: SortOrder
    level?: SortOrder
    createdAt?: SortOrder
    isBanned?: SortOrder
    isAdmin?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    age?: SortOrder
    level?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CardCountOrderByAggregateInput = {
    id?: SortOrder
    last4?: SortOrder
    brand?: SortOrder
    expiration?: SortOrder
    paymentMethodId?: SortOrder
    userId?: SortOrder
  }

  export type CardAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type CardMaxOrderByAggregateInput = {
    id?: SortOrder
    last4?: SortOrder
    brand?: SortOrder
    expiration?: SortOrder
    paymentMethodId?: SortOrder
    userId?: SortOrder
  }

  export type CardMinOrderByAggregateInput = {
    id?: SortOrder
    last4?: SortOrder
    brand?: SortOrder
    expiration?: SortOrder
    paymentMethodId?: SortOrder
    userId?: SortOrder
  }

  export type CardSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type PackCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    points?: SortOrder
    price?: SortOrder
  }

  export type PackAvgOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    price?: SortOrder
  }

  export type PackMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    points?: SortOrder
    price?: SortOrder
  }

  export type PackMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    points?: SortOrder
    price?: SortOrder
  }

  export type PackSumOrderByAggregateInput = {
    id?: SortOrder
    points?: SortOrder
    price?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type CommunityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    skill?: SortOrder
  }

  export type CommunityAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CommunityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    skill?: SortOrder
  }

  export type CommunityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    skill?: SortOrder
  }

  export type CommunitySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    skill?: SortOrder
    desc?: SortOrder
    likes?: SortOrder
    userId?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
    userId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    skill?: SortOrder
    desc?: SortOrder
    likes?: SortOrder
    userId?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    title?: SortOrder
    skill?: SortOrder
    desc?: SortOrder
    likes?: SortOrder
    userId?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
    userId?: SortOrder
  }

  export type PostRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type EnumFriendshipStatusFilter = {
    equals?: FriendshipStatus
    in?: Enumerable<FriendshipStatus>
    notIn?: Enumerable<FriendshipStatus>
    not?: NestedEnumFriendshipStatusFilter | FriendshipStatus
  }

  export type FriendshipCountOrderByAggregateInput = {
    id?: SortOrder
    requestorId?: SortOrder
    respondentId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FriendshipAvgOrderByAggregateInput = {
    id?: SortOrder
    requestorId?: SortOrder
    respondentId?: SortOrder
  }

  export type FriendshipMaxOrderByAggregateInput = {
    id?: SortOrder
    requestorId?: SortOrder
    respondentId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FriendshipMinOrderByAggregateInput = {
    id?: SortOrder
    requestorId?: SortOrder
    respondentId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FriendshipSumOrderByAggregateInput = {
    id?: SortOrder
    requestorId?: SortOrder
    respondentId?: SortOrder
  }

  export type EnumFriendshipStatusWithAggregatesFilter = {
    equals?: FriendshipStatus
    in?: Enumerable<FriendshipStatus>
    notIn?: Enumerable<FriendshipStatus>
    not?: NestedEnumFriendshipStatusWithAggregatesFilter | FriendshipStatus
    _count?: NestedIntFilter
    _min?: NestedEnumFriendshipStatusFilter
    _max?: NestedEnumFriendshipStatusFilter
  }

  export type CommunityRelationFilter = {
    is?: CommunityWhereInput
    isNot?: CommunityWhereInput
  }

  export type MembershipCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
    isAdmin?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MembershipAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
  }

  export type MembershipMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
    isAdmin?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MembershipMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
    isAdmin?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MembershipSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    communityId?: SortOrder
  }

  export type PostMCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    image?: SortOrder
    description?: SortOrder
    skill?: SortOrder
    userId?: SortOrder
  }

  export type PostMAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    userId?: SortOrder
  }

  export type PostMMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    description?: SortOrder
    skill?: SortOrder
    userId?: SortOrder
  }

  export type PostMMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    description?: SortOrder
    skill?: SortOrder
    userId?: SortOrder
  }

  export type PostMSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    userId?: SortOrder
  }

  export type PostMRelationFilter = {
    is?: PostMWhereInput
    isNot?: PostMWhereInput
  }

  export type ReviewMCountOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type ReviewMAvgOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type ReviewMMaxOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type ReviewMMinOrderByAggregateInput = {
    id?: SortOrder
    comment?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type ReviewMSumOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type CountryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CountryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CountryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CountryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CountrySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserCreateskillsInput = {
    set: Enumerable<string>
  }

  export type UserCreatehobbiesInput = {
    set: Enumerable<string>
  }

  export type CardCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CardCreateWithoutUserInput>, Enumerable<CardUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CardCreateOrConnectWithoutUserInput>
    createMany?: CardCreateManyUserInputEnvelope
    connect?: Enumerable<CardWhereUniqueInput>
  }

  export type FriendshipCreateNestedManyWithoutRequestorInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutRequestorInput>, Enumerable<FriendshipUncheckedCreateWithoutRequestorInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutRequestorInput>
    createMany?: FriendshipCreateManyRequestorInputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type FriendshipCreateNestedManyWithoutRespondentInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutRespondentInput>, Enumerable<FriendshipUncheckedCreateWithoutRespondentInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutRespondentInput>
    createMany?: FriendshipCreateManyRespondentInputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type PostCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    createMany?: PostCreateManyUserInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutUserInput>, Enumerable<ReviewUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutUserInput>
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: Enumerable<ReviewWhereUniqueInput>
  }

  export type MembershipCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutUserInput>, Enumerable<MembershipUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutUserInput>
    createMany?: MembershipCreateManyUserInputEnvelope
    connect?: Enumerable<MembershipWhereUniqueInput>
  }

  export type PostMCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostMCreateWithoutUserInput>, Enumerable<PostMUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostMCreateOrConnectWithoutUserInput>
    createMany?: PostMCreateManyUserInputEnvelope
    connect?: Enumerable<PostMWhereUniqueInput>
  }

  export type ReviewMCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReviewMCreateWithoutUserInput>, Enumerable<ReviewMUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReviewMCreateOrConnectWithoutUserInput>
    createMany?: ReviewMCreateManyUserInputEnvelope
    connect?: Enumerable<ReviewMWhereUniqueInput>
  }

  export type CardUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CardCreateWithoutUserInput>, Enumerable<CardUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CardCreateOrConnectWithoutUserInput>
    createMany?: CardCreateManyUserInputEnvelope
    connect?: Enumerable<CardWhereUniqueInput>
  }

  export type FriendshipUncheckedCreateNestedManyWithoutRequestorInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutRequestorInput>, Enumerable<FriendshipUncheckedCreateWithoutRequestorInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutRequestorInput>
    createMany?: FriendshipCreateManyRequestorInputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type FriendshipUncheckedCreateNestedManyWithoutRespondentInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutRespondentInput>, Enumerable<FriendshipUncheckedCreateWithoutRespondentInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutRespondentInput>
    createMany?: FriendshipCreateManyRespondentInputEnvelope
    connect?: Enumerable<FriendshipWhereUniqueInput>
  }

  export type PostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    createMany?: PostCreateManyUserInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutUserInput>, Enumerable<ReviewUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutUserInput>
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: Enumerable<ReviewWhereUniqueInput>
  }

  export type MembershipUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutUserInput>, Enumerable<MembershipUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutUserInput>
    createMany?: MembershipCreateManyUserInputEnvelope
    connect?: Enumerable<MembershipWhereUniqueInput>
  }

  export type PostMUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostMCreateWithoutUserInput>, Enumerable<PostMUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostMCreateOrConnectWithoutUserInput>
    createMany?: PostMCreateManyUserInputEnvelope
    connect?: Enumerable<PostMWhereUniqueInput>
  }

  export type ReviewMUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ReviewMCreateWithoutUserInput>, Enumerable<ReviewMUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReviewMCreateOrConnectWithoutUserInput>
    createMany?: ReviewMCreateManyUserInputEnvelope
    connect?: Enumerable<ReviewMWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateskillsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type UserUpdatehobbiesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CardUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<CardCreateWithoutUserInput>, Enumerable<CardUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CardCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CardUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CardCreateManyUserInputEnvelope
    set?: Enumerable<CardWhereUniqueInput>
    disconnect?: Enumerable<CardWhereUniqueInput>
    delete?: Enumerable<CardWhereUniqueInput>
    connect?: Enumerable<CardWhereUniqueInput>
    update?: Enumerable<CardUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CardUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CardScalarWhereInput>
  }

  export type FriendshipUpdateManyWithoutRequestorNestedInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutRequestorInput>, Enumerable<FriendshipUncheckedCreateWithoutRequestorInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutRequestorInput>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutRequestorInput>
    createMany?: FriendshipCreateManyRequestorInputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutRequestorInput>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutRequestorInput>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type FriendshipUpdateManyWithoutRespondentNestedInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutRespondentInput>, Enumerable<FriendshipUncheckedCreateWithoutRespondentInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutRespondentInput>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutRespondentInput>
    createMany?: FriendshipCreateManyRespondentInputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutRespondentInput>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutRespondentInput>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type PostUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PostCreateManyUserInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutUserInput>, Enumerable<ReviewUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReviewUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: Enumerable<ReviewWhereUniqueInput>
    disconnect?: Enumerable<ReviewWhereUniqueInput>
    delete?: Enumerable<ReviewWhereUniqueInput>
    connect?: Enumerable<ReviewWhereUniqueInput>
    update?: Enumerable<ReviewUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReviewUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReviewScalarWhereInput>
  }

  export type MembershipUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutUserInput>, Enumerable<MembershipUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MembershipUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MembershipCreateManyUserInputEnvelope
    set?: Enumerable<MembershipWhereUniqueInput>
    disconnect?: Enumerable<MembershipWhereUniqueInput>
    delete?: Enumerable<MembershipWhereUniqueInput>
    connect?: Enumerable<MembershipWhereUniqueInput>
    update?: Enumerable<MembershipUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MembershipUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MembershipScalarWhereInput>
  }

  export type PostMUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PostMCreateWithoutUserInput>, Enumerable<PostMUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostMCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostMUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PostMCreateManyUserInputEnvelope
    set?: Enumerable<PostMWhereUniqueInput>
    disconnect?: Enumerable<PostMWhereUniqueInput>
    delete?: Enumerable<PostMWhereUniqueInput>
    connect?: Enumerable<PostMWhereUniqueInput>
    update?: Enumerable<PostMUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostMUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostMScalarWhereInput>
  }

  export type ReviewMUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReviewMCreateWithoutUserInput>, Enumerable<ReviewMUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReviewMCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReviewMUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReviewMCreateManyUserInputEnvelope
    set?: Enumerable<ReviewMWhereUniqueInput>
    disconnect?: Enumerable<ReviewMWhereUniqueInput>
    delete?: Enumerable<ReviewMWhereUniqueInput>
    connect?: Enumerable<ReviewMWhereUniqueInput>
    update?: Enumerable<ReviewMUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReviewMUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReviewMScalarWhereInput>
  }

  export type CardUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<CardCreateWithoutUserInput>, Enumerable<CardUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CardCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CardUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CardCreateManyUserInputEnvelope
    set?: Enumerable<CardWhereUniqueInput>
    disconnect?: Enumerable<CardWhereUniqueInput>
    delete?: Enumerable<CardWhereUniqueInput>
    connect?: Enumerable<CardWhereUniqueInput>
    update?: Enumerable<CardUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CardUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CardScalarWhereInput>
  }

  export type FriendshipUncheckedUpdateManyWithoutRequestorNestedInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutRequestorInput>, Enumerable<FriendshipUncheckedCreateWithoutRequestorInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutRequestorInput>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutRequestorInput>
    createMany?: FriendshipCreateManyRequestorInputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutRequestorInput>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutRequestorInput>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type FriendshipUncheckedUpdateManyWithoutRespondentNestedInput = {
    create?: XOR<Enumerable<FriendshipCreateWithoutRespondentInput>, Enumerable<FriendshipUncheckedCreateWithoutRespondentInput>>
    connectOrCreate?: Enumerable<FriendshipCreateOrConnectWithoutRespondentInput>
    upsert?: Enumerable<FriendshipUpsertWithWhereUniqueWithoutRespondentInput>
    createMany?: FriendshipCreateManyRespondentInputEnvelope
    set?: Enumerable<FriendshipWhereUniqueInput>
    disconnect?: Enumerable<FriendshipWhereUniqueInput>
    delete?: Enumerable<FriendshipWhereUniqueInput>
    connect?: Enumerable<FriendshipWhereUniqueInput>
    update?: Enumerable<FriendshipUpdateWithWhereUniqueWithoutRespondentInput>
    updateMany?: Enumerable<FriendshipUpdateManyWithWhereWithoutRespondentInput>
    deleteMany?: Enumerable<FriendshipScalarWhereInput>
  }

  export type PostUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PostCreateManyUserInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutUserInput>, Enumerable<ReviewUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReviewUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: Enumerable<ReviewWhereUniqueInput>
    disconnect?: Enumerable<ReviewWhereUniqueInput>
    delete?: Enumerable<ReviewWhereUniqueInput>
    connect?: Enumerable<ReviewWhereUniqueInput>
    update?: Enumerable<ReviewUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReviewUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReviewScalarWhereInput>
  }

  export type MembershipUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutUserInput>, Enumerable<MembershipUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MembershipUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MembershipCreateManyUserInputEnvelope
    set?: Enumerable<MembershipWhereUniqueInput>
    disconnect?: Enumerable<MembershipWhereUniqueInput>
    delete?: Enumerable<MembershipWhereUniqueInput>
    connect?: Enumerable<MembershipWhereUniqueInput>
    update?: Enumerable<MembershipUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MembershipUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MembershipScalarWhereInput>
  }

  export type PostMUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PostMCreateWithoutUserInput>, Enumerable<PostMUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostMCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostMUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PostMCreateManyUserInputEnvelope
    set?: Enumerable<PostMWhereUniqueInput>
    disconnect?: Enumerable<PostMWhereUniqueInput>
    delete?: Enumerable<PostMWhereUniqueInput>
    connect?: Enumerable<PostMWhereUniqueInput>
    update?: Enumerable<PostMUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostMUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostMScalarWhereInput>
  }

  export type ReviewMUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ReviewMCreateWithoutUserInput>, Enumerable<ReviewMUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ReviewMCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ReviewMUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ReviewMCreateManyUserInputEnvelope
    set?: Enumerable<ReviewMWhereUniqueInput>
    disconnect?: Enumerable<ReviewMWhereUniqueInput>
    delete?: Enumerable<ReviewMWhereUniqueInput>
    connect?: Enumerable<ReviewMWhereUniqueInput>
    update?: Enumerable<ReviewMUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ReviewMUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ReviewMScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutCardsInput = {
    create?: XOR<UserCreateWithoutCardsInput, UserUncheckedCreateWithoutCardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCardsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCardsNestedInput = {
    create?: XOR<UserCreateWithoutCardsInput, UserUncheckedCreateWithoutCardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCardsInput
    upsert?: UserUpsertWithoutCardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCardsInput, UserUncheckedUpdateWithoutCardsInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MembershipCreateNestedManyWithoutCommunityInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutCommunityInput>, Enumerable<MembershipUncheckedCreateWithoutCommunityInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutCommunityInput>
    createMany?: MembershipCreateManyCommunityInputEnvelope
    connect?: Enumerable<MembershipWhereUniqueInput>
  }

  export type MembershipUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutCommunityInput>, Enumerable<MembershipUncheckedCreateWithoutCommunityInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutCommunityInput>
    createMany?: MembershipCreateManyCommunityInputEnvelope
    connect?: Enumerable<MembershipWhereUniqueInput>
  }

  export type MembershipUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutCommunityInput>, Enumerable<MembershipUncheckedCreateWithoutCommunityInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutCommunityInput>
    upsert?: Enumerable<MembershipUpsertWithWhereUniqueWithoutCommunityInput>
    createMany?: MembershipCreateManyCommunityInputEnvelope
    set?: Enumerable<MembershipWhereUniqueInput>
    disconnect?: Enumerable<MembershipWhereUniqueInput>
    delete?: Enumerable<MembershipWhereUniqueInput>
    connect?: Enumerable<MembershipWhereUniqueInput>
    update?: Enumerable<MembershipUpdateWithWhereUniqueWithoutCommunityInput>
    updateMany?: Enumerable<MembershipUpdateManyWithWhereWithoutCommunityInput>
    deleteMany?: Enumerable<MembershipScalarWhereInput>
  }

  export type MembershipUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<Enumerable<MembershipCreateWithoutCommunityInput>, Enumerable<MembershipUncheckedCreateWithoutCommunityInput>>
    connectOrCreate?: Enumerable<MembershipCreateOrConnectWithoutCommunityInput>
    upsert?: Enumerable<MembershipUpsertWithWhereUniqueWithoutCommunityInput>
    createMany?: MembershipCreateManyCommunityInputEnvelope
    set?: Enumerable<MembershipWhereUniqueInput>
    disconnect?: Enumerable<MembershipWhereUniqueInput>
    delete?: Enumerable<MembershipWhereUniqueInput>
    connect?: Enumerable<MembershipWhereUniqueInput>
    update?: Enumerable<MembershipUpdateWithWhereUniqueWithoutCommunityInput>
    updateMany?: Enumerable<MembershipUpdateManyWithWhereWithoutCommunityInput>
    deleteMany?: Enumerable<MembershipScalarWhereInput>
  }

  export type CommentCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type ReviewCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutPostInput>, Enumerable<ReviewUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutPostInput>
    createMany?: ReviewCreateManyPostInputEnvelope
    connect?: Enumerable<ReviewWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type ReviewUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutPostInput>, Enumerable<ReviewUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutPostInput>
    createMany?: ReviewCreateManyPostInputEnvelope
    connect?: Enumerable<ReviewWhereUniqueInput>
  }

  export type CommentUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutPostInput>
    createMany?: CommentCreateManyPostInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type ReviewUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutPostInput>, Enumerable<ReviewUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ReviewUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ReviewCreateManyPostInputEnvelope
    set?: Enumerable<ReviewWhereUniqueInput>
    disconnect?: Enumerable<ReviewWhereUniqueInput>
    delete?: Enumerable<ReviewWhereUniqueInput>
    connect?: Enumerable<ReviewWhereUniqueInput>
    update?: Enumerable<ReviewUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ReviewUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ReviewScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    upsert?: UserUpsertWithoutPostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
  }

  export type CommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutPostInput>
    createMany?: CommentCreateManyPostInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type ReviewUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ReviewCreateWithoutPostInput>, Enumerable<ReviewUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ReviewCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ReviewUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ReviewCreateManyPostInputEnvelope
    set?: Enumerable<ReviewWhereUniqueInput>
    disconnect?: Enumerable<ReviewWhereUniqueInput>
    delete?: Enumerable<ReviewWhereUniqueInput>
    connect?: Enumerable<ReviewWhereUniqueInput>
    update?: Enumerable<ReviewUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ReviewUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ReviewScalarWhereInput>
  }

  export type PostCreateNestedOneWithoutCommentsInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    connect?: PostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    upsert?: PostUpsertWithoutCommentsInput
    connect?: PostWhereUniqueInput
    update?: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type PostCreateNestedOneWithoutReviewsInput = {
    create?: XOR<PostCreateWithoutReviewsInput, PostUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: PostCreateOrConnectWithoutReviewsInput
    connect?: PostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<PostCreateWithoutReviewsInput, PostUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: PostCreateOrConnectWithoutReviewsInput
    upsert?: PostUpsertWithoutReviewsInput
    connect?: PostWhereUniqueInput
    update?: XOR<PostUpdateWithoutReviewsInput, PostUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserCreateNestedOneWithoutSentRequestsInput = {
    create?: XOR<UserCreateWithoutSentRequestsInput, UserUncheckedCreateWithoutSentRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedRequestsInput = {
    create?: XOR<UserCreateWithoutReceivedRequestsInput, UserUncheckedCreateWithoutReceivedRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumFriendshipStatusFieldUpdateOperationsInput = {
    set?: FriendshipStatus
  }

  export type UserUpdateOneRequiredWithoutSentRequestsNestedInput = {
    create?: XOR<UserCreateWithoutSentRequestsInput, UserUncheckedCreateWithoutSentRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentRequestsInput
    upsert?: UserUpsertWithoutSentRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSentRequestsInput, UserUncheckedUpdateWithoutSentRequestsInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedRequestsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedRequestsInput, UserUncheckedCreateWithoutReceivedRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedRequestsInput
    upsert?: UserUpsertWithoutReceivedRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutReceivedRequestsInput, UserUncheckedUpdateWithoutReceivedRequestsInput>
  }

  export type UserCreateNestedOneWithoutMembershipsInput = {
    create?: XOR<UserCreateWithoutMembershipsInput, UserUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMembershipsInput
    connect?: UserWhereUniqueInput
  }

  export type CommunityCreateNestedOneWithoutMembershipsInput = {
    create?: XOR<CommunityCreateWithoutMembershipsInput, CommunityUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutMembershipsInput
    connect?: CommunityWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMembershipsNestedInput = {
    create?: XOR<UserCreateWithoutMembershipsInput, UserUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMembershipsInput
    upsert?: UserUpsertWithoutMembershipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMembershipsInput, UserUncheckedUpdateWithoutMembershipsInput>
  }

  export type CommunityUpdateOneRequiredWithoutMembershipsNestedInput = {
    create?: XOR<CommunityCreateWithoutMembershipsInput, CommunityUncheckedCreateWithoutMembershipsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutMembershipsInput
    upsert?: CommunityUpsertWithoutMembershipsInput
    connect?: CommunityWhereUniqueInput
    update?: XOR<CommunityUpdateWithoutMembershipsInput, CommunityUncheckedUpdateWithoutMembershipsInput>
  }

  export type PostMCreateimageInput = {
    set: Enumerable<string>
  }

  export type ReviewMCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ReviewMCreateWithoutPostInput>, Enumerable<ReviewMUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ReviewMCreateOrConnectWithoutPostInput>
    createMany?: ReviewMCreateManyPostInputEnvelope
    connect?: Enumerable<ReviewMWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutPostMInput = {
    create?: XOR<UserCreateWithoutPostMInput, UserUncheckedCreateWithoutPostMInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostMInput
    connect?: UserWhereUniqueInput
  }

  export type ReviewMUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ReviewMCreateWithoutPostInput>, Enumerable<ReviewMUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ReviewMCreateOrConnectWithoutPostInput>
    createMany?: ReviewMCreateManyPostInputEnvelope
    connect?: Enumerable<ReviewMWhereUniqueInput>
  }

  export type PostMUpdateimageInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ReviewMUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ReviewMCreateWithoutPostInput>, Enumerable<ReviewMUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ReviewMCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ReviewMUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ReviewMCreateManyPostInputEnvelope
    set?: Enumerable<ReviewMWhereUniqueInput>
    disconnect?: Enumerable<ReviewMWhereUniqueInput>
    delete?: Enumerable<ReviewMWhereUniqueInput>
    connect?: Enumerable<ReviewMWhereUniqueInput>
    update?: Enumerable<ReviewMUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ReviewMUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ReviewMScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutPostMNestedInput = {
    create?: XOR<UserCreateWithoutPostMInput, UserUncheckedCreateWithoutPostMInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostMInput
    upsert?: UserUpsertWithoutPostMInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPostMInput, UserUncheckedUpdateWithoutPostMInput>
  }

  export type ReviewMUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ReviewMCreateWithoutPostInput>, Enumerable<ReviewMUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ReviewMCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ReviewMUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ReviewMCreateManyPostInputEnvelope
    set?: Enumerable<ReviewMWhereUniqueInput>
    disconnect?: Enumerable<ReviewMWhereUniqueInput>
    delete?: Enumerable<ReviewMWhereUniqueInput>
    connect?: Enumerable<ReviewMWhereUniqueInput>
    update?: Enumerable<ReviewMUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ReviewMUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ReviewMScalarWhereInput>
  }

  export type PostMCreateNestedOneWithoutReviewsInput = {
    create?: XOR<PostMCreateWithoutReviewsInput, PostMUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: PostMCreateOrConnectWithoutReviewsInput
    connect?: PostMWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReviewMInput = {
    create?: XOR<UserCreateWithoutReviewMInput, UserUncheckedCreateWithoutReviewMInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewMInput
    connect?: UserWhereUniqueInput
  }

  export type PostMUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<PostMCreateWithoutReviewsInput, PostMUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: PostMCreateOrConnectWithoutReviewsInput
    upsert?: PostMUpsertWithoutReviewsInput
    connect?: PostMWhereUniqueInput
    update?: XOR<PostMUpdateWithoutReviewsInput, PostMUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutReviewMNestedInput = {
    create?: XOR<UserCreateWithoutReviewMInput, UserUncheckedCreateWithoutReviewMInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewMInput
    upsert?: UserUpsertWithoutReviewMInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutReviewMInput, UserUncheckedUpdateWithoutReviewMInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedEnumFriendshipStatusFilter = {
    equals?: FriendshipStatus
    in?: Enumerable<FriendshipStatus>
    notIn?: Enumerable<FriendshipStatus>
    not?: NestedEnumFriendshipStatusFilter | FriendshipStatus
  }

  export type NestedEnumFriendshipStatusWithAggregatesFilter = {
    equals?: FriendshipStatus
    in?: Enumerable<FriendshipStatus>
    notIn?: Enumerable<FriendshipStatus>
    not?: NestedEnumFriendshipStatusWithAggregatesFilter | FriendshipStatus
    _count?: NestedIntFilter
    _min?: NestedEnumFriendshipStatusFilter
    _max?: NestedEnumFriendshipStatusFilter
  }

  export type CardCreateWithoutUserInput = {
    last4: string
    brand: string
    expiration: string
    paymentMethodId?: string | null
  }

  export type CardUncheckedCreateWithoutUserInput = {
    id?: number
    last4: string
    brand: string
    expiration: string
    paymentMethodId?: string | null
  }

  export type CardCreateOrConnectWithoutUserInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutUserInput, CardUncheckedCreateWithoutUserInput>
  }

  export type CardCreateManyUserInputEnvelope = {
    data: Enumerable<CardCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type FriendshipCreateWithoutRequestorInput = {
    status?: FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    respondent: UserCreateNestedOneWithoutReceivedRequestsInput
  }

  export type FriendshipUncheckedCreateWithoutRequestorInput = {
    id?: number
    respondentId: number
    status?: FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendshipCreateOrConnectWithoutRequestorInput = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutRequestorInput, FriendshipUncheckedCreateWithoutRequestorInput>
  }

  export type FriendshipCreateManyRequestorInputEnvelope = {
    data: Enumerable<FriendshipCreateManyRequestorInput>
    skipDuplicates?: boolean
  }

  export type FriendshipCreateWithoutRespondentInput = {
    status?: FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    requestor: UserCreateNestedOneWithoutSentRequestsInput
  }

  export type FriendshipUncheckedCreateWithoutRespondentInput = {
    id?: number
    requestorId: number
    status?: FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendshipCreateOrConnectWithoutRespondentInput = {
    where: FriendshipWhereUniqueInput
    create: XOR<FriendshipCreateWithoutRespondentInput, FriendshipUncheckedCreateWithoutRespondentInput>
  }

  export type FriendshipCreateManyRespondentInputEnvelope = {
    data: Enumerable<FriendshipCreateManyRespondentInput>
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutUserInput = {
    image: string
    title: string
    skill: string
    desc: string
    likes: number
    comments?: CommentCreateNestedManyWithoutPostInput
    reviews?: ReviewCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutUserInput = {
    id?: number
    image: string
    title: string
    skill: string
    desc: string
    likes: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutUserInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostCreateManyUserInputEnvelope = {
    data: Enumerable<PostCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    text: string
    post: PostCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: number
    text: string
    postId: number
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: Enumerable<CommentCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutUserInput = {
    rating: number
    post: PostCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: number
    rating: number
    postId: number
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: Enumerable<ReviewCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type MembershipCreateWithoutUserInput = {
    isAdmin?: boolean
    isAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    community: CommunityCreateNestedOneWithoutMembershipsInput
  }

  export type MembershipUncheckedCreateWithoutUserInput = {
    id?: number
    communityId: number
    isAdmin?: boolean
    isAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MembershipCreateOrConnectWithoutUserInput = {
    where: MembershipWhereUniqueInput
    create: XOR<MembershipCreateWithoutUserInput, MembershipUncheckedCreateWithoutUserInput>
  }

  export type MembershipCreateManyUserInputEnvelope = {
    data: Enumerable<MembershipCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type PostMCreateWithoutUserInput = {
    title: string
    price: number
    image?: PostMCreateimageInput | Enumerable<string>
    description: string
    skill: string
    reviews?: ReviewMCreateNestedManyWithoutPostInput
  }

  export type PostMUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    price: number
    image?: PostMCreateimageInput | Enumerable<string>
    description: string
    skill: string
    reviews?: ReviewMUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostMCreateOrConnectWithoutUserInput = {
    where: PostMWhereUniqueInput
    create: XOR<PostMCreateWithoutUserInput, PostMUncheckedCreateWithoutUserInput>
  }

  export type PostMCreateManyUserInputEnvelope = {
    data: Enumerable<PostMCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ReviewMCreateWithoutUserInput = {
    comment: string
    rating: number
    post: PostMCreateNestedOneWithoutReviewsInput
  }

  export type ReviewMUncheckedCreateWithoutUserInput = {
    id?: number
    comment: string
    rating: number
    postId: number
  }

  export type ReviewMCreateOrConnectWithoutUserInput = {
    where: ReviewMWhereUniqueInput
    create: XOR<ReviewMCreateWithoutUserInput, ReviewMUncheckedCreateWithoutUserInput>
  }

  export type ReviewMCreateManyUserInputEnvelope = {
    data: Enumerable<ReviewMCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type CardUpsertWithWhereUniqueWithoutUserInput = {
    where: CardWhereUniqueInput
    update: XOR<CardUpdateWithoutUserInput, CardUncheckedUpdateWithoutUserInput>
    create: XOR<CardCreateWithoutUserInput, CardUncheckedCreateWithoutUserInput>
  }

  export type CardUpdateWithWhereUniqueWithoutUserInput = {
    where: CardWhereUniqueInput
    data: XOR<CardUpdateWithoutUserInput, CardUncheckedUpdateWithoutUserInput>
  }

  export type CardUpdateManyWithWhereWithoutUserInput = {
    where: CardScalarWhereInput
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyWithoutCardsInput>
  }

  export type CardScalarWhereInput = {
    AND?: Enumerable<CardScalarWhereInput>
    OR?: Enumerable<CardScalarWhereInput>
    NOT?: Enumerable<CardScalarWhereInput>
    id?: IntFilter | number
    last4?: StringFilter | string
    brand?: StringFilter | string
    expiration?: StringFilter | string
    paymentMethodId?: StringNullableFilter | string | null
    userId?: IntFilter | number
  }

  export type FriendshipUpsertWithWhereUniqueWithoutRequestorInput = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutRequestorInput, FriendshipUncheckedUpdateWithoutRequestorInput>
    create: XOR<FriendshipCreateWithoutRequestorInput, FriendshipUncheckedCreateWithoutRequestorInput>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutRequestorInput = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutRequestorInput, FriendshipUncheckedUpdateWithoutRequestorInput>
  }

  export type FriendshipUpdateManyWithWhereWithoutRequestorInput = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutSentRequestsInput>
  }

  export type FriendshipScalarWhereInput = {
    AND?: Enumerable<FriendshipScalarWhereInput>
    OR?: Enumerable<FriendshipScalarWhereInput>
    NOT?: Enumerable<FriendshipScalarWhereInput>
    id?: IntFilter | number
    requestorId?: IntFilter | number
    respondentId?: IntFilter | number
    status?: EnumFriendshipStatusFilter | FriendshipStatus
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FriendshipUpsertWithWhereUniqueWithoutRespondentInput = {
    where: FriendshipWhereUniqueInput
    update: XOR<FriendshipUpdateWithoutRespondentInput, FriendshipUncheckedUpdateWithoutRespondentInput>
    create: XOR<FriendshipCreateWithoutRespondentInput, FriendshipUncheckedCreateWithoutRespondentInput>
  }

  export type FriendshipUpdateWithWhereUniqueWithoutRespondentInput = {
    where: FriendshipWhereUniqueInput
    data: XOR<FriendshipUpdateWithoutRespondentInput, FriendshipUncheckedUpdateWithoutRespondentInput>
  }

  export type FriendshipUpdateManyWithWhereWithoutRespondentInput = {
    where: FriendshipScalarWhereInput
    data: XOR<FriendshipUpdateManyMutationInput, FriendshipUncheckedUpdateManyWithoutReceivedRequestsInput>
  }

  export type PostUpsertWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostUpdateWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
  }

  export type PostUpdateManyWithWhereWithoutUserInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostsInput>
  }

  export type PostScalarWhereInput = {
    AND?: Enumerable<PostScalarWhereInput>
    OR?: Enumerable<PostScalarWhereInput>
    NOT?: Enumerable<PostScalarWhereInput>
    id?: IntFilter | number
    image?: StringFilter | string
    title?: StringFilter | string
    skill?: StringFilter | string
    desc?: StringFilter | string
    likes?: IntFilter | number
    userId?: IntFilter | number
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentsInput>
  }

  export type CommentScalarWhereInput = {
    AND?: Enumerable<CommentScalarWhereInput>
    OR?: Enumerable<CommentScalarWhereInput>
    NOT?: Enumerable<CommentScalarWhereInput>
    id?: IntFilter | number
    text?: StringFilter | string
    postId?: IntFilter | number
    userId?: IntFilter | number
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutReviewsInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: Enumerable<ReviewScalarWhereInput>
    OR?: Enumerable<ReviewScalarWhereInput>
    NOT?: Enumerable<ReviewScalarWhereInput>
    id?: IntFilter | number
    rating?: IntFilter | number
    postId?: IntFilter | number
    userId?: IntFilter | number
  }

  export type MembershipUpsertWithWhereUniqueWithoutUserInput = {
    where: MembershipWhereUniqueInput
    update: XOR<MembershipUpdateWithoutUserInput, MembershipUncheckedUpdateWithoutUserInput>
    create: XOR<MembershipCreateWithoutUserInput, MembershipUncheckedCreateWithoutUserInput>
  }

  export type MembershipUpdateWithWhereUniqueWithoutUserInput = {
    where: MembershipWhereUniqueInput
    data: XOR<MembershipUpdateWithoutUserInput, MembershipUncheckedUpdateWithoutUserInput>
  }

  export type MembershipUpdateManyWithWhereWithoutUserInput = {
    where: MembershipScalarWhereInput
    data: XOR<MembershipUpdateManyMutationInput, MembershipUncheckedUpdateManyWithoutMembershipsInput>
  }

  export type MembershipScalarWhereInput = {
    AND?: Enumerable<MembershipScalarWhereInput>
    OR?: Enumerable<MembershipScalarWhereInput>
    NOT?: Enumerable<MembershipScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    communityId?: IntFilter | number
    isAdmin?: BoolFilter | boolean
    isAccepted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PostMUpsertWithWhereUniqueWithoutUserInput = {
    where: PostMWhereUniqueInput
    update: XOR<PostMUpdateWithoutUserInput, PostMUncheckedUpdateWithoutUserInput>
    create: XOR<PostMCreateWithoutUserInput, PostMUncheckedCreateWithoutUserInput>
  }

  export type PostMUpdateWithWhereUniqueWithoutUserInput = {
    where: PostMWhereUniqueInput
    data: XOR<PostMUpdateWithoutUserInput, PostMUncheckedUpdateWithoutUserInput>
  }

  export type PostMUpdateManyWithWhereWithoutUserInput = {
    where: PostMScalarWhereInput
    data: XOR<PostMUpdateManyMutationInput, PostMUncheckedUpdateManyWithoutPostMInput>
  }

  export type PostMScalarWhereInput = {
    AND?: Enumerable<PostMScalarWhereInput>
    OR?: Enumerable<PostMScalarWhereInput>
    NOT?: Enumerable<PostMScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    price?: FloatFilter | number
    image?: StringNullableListFilter
    description?: StringFilter | string
    skill?: StringFilter | string
    userId?: IntFilter | number
  }

  export type ReviewMUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewMWhereUniqueInput
    update: XOR<ReviewMUpdateWithoutUserInput, ReviewMUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewMCreateWithoutUserInput, ReviewMUncheckedCreateWithoutUserInput>
  }

  export type ReviewMUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewMWhereUniqueInput
    data: XOR<ReviewMUpdateWithoutUserInput, ReviewMUncheckedUpdateWithoutUserInput>
  }

  export type ReviewMUpdateManyWithWhereWithoutUserInput = {
    where: ReviewMScalarWhereInput
    data: XOR<ReviewMUpdateManyMutationInput, ReviewMUncheckedUpdateManyWithoutReviewMInput>
  }

  export type ReviewMScalarWhereInput = {
    AND?: Enumerable<ReviewMScalarWhereInput>
    OR?: Enumerable<ReviewMScalarWhereInput>
    NOT?: Enumerable<ReviewMScalarWhereInput>
    id?: IntFilter | number
    comment?: StringFilter | string
    rating?: IntFilter | number
    postId?: IntFilter | number
    userId?: IntFilter | number
  }

  export type UserCreateWithoutCardsInput = {
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    sentRequests?: FriendshipCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipCreateNestedManyWithoutRespondentInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    memberships?: MembershipCreateNestedManyWithoutUserInput
    PostM?: PostMCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCardsInput = {
    id?: number
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    sentRequests?: FriendshipUncheckedCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipUncheckedCreateNestedManyWithoutRespondentInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    memberships?: MembershipUncheckedCreateNestedManyWithoutUserInput
    PostM?: PostMUncheckedCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCardsInput, UserUncheckedCreateWithoutCardsInput>
  }

  export type UserUpsertWithoutCardsInput = {
    update: XOR<UserUpdateWithoutCardsInput, UserUncheckedUpdateWithoutCardsInput>
    create: XOR<UserCreateWithoutCardsInput, UserUncheckedCreateWithoutCardsInput>
  }

  export type UserUpdateWithoutCardsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    sentRequests?: FriendshipUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUpdateManyWithoutRespondentNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    memberships?: MembershipUpdateManyWithoutUserNestedInput
    PostM?: PostMUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    sentRequests?: FriendshipUncheckedUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUncheckedUpdateManyWithoutRespondentNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    memberships?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    PostM?: PostMUncheckedUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MembershipCreateWithoutCommunityInput = {
    isAdmin?: boolean
    isAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMembershipsInput
  }

  export type MembershipUncheckedCreateWithoutCommunityInput = {
    id?: number
    userId: number
    isAdmin?: boolean
    isAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MembershipCreateOrConnectWithoutCommunityInput = {
    where: MembershipWhereUniqueInput
    create: XOR<MembershipCreateWithoutCommunityInput, MembershipUncheckedCreateWithoutCommunityInput>
  }

  export type MembershipCreateManyCommunityInputEnvelope = {
    data: Enumerable<MembershipCreateManyCommunityInput>
    skipDuplicates?: boolean
  }

  export type MembershipUpsertWithWhereUniqueWithoutCommunityInput = {
    where: MembershipWhereUniqueInput
    update: XOR<MembershipUpdateWithoutCommunityInput, MembershipUncheckedUpdateWithoutCommunityInput>
    create: XOR<MembershipCreateWithoutCommunityInput, MembershipUncheckedCreateWithoutCommunityInput>
  }

  export type MembershipUpdateWithWhereUniqueWithoutCommunityInput = {
    where: MembershipWhereUniqueInput
    data: XOR<MembershipUpdateWithoutCommunityInput, MembershipUncheckedUpdateWithoutCommunityInput>
  }

  export type MembershipUpdateManyWithWhereWithoutCommunityInput = {
    where: MembershipScalarWhereInput
    data: XOR<MembershipUpdateManyMutationInput, MembershipUncheckedUpdateManyWithoutMembershipsInput>
  }

  export type CommentCreateWithoutPostInput = {
    text: string
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutPostInput = {
    id?: number
    text: string
    userId: number
  }

  export type CommentCreateOrConnectWithoutPostInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentCreateManyPostInputEnvelope = {
    data: Enumerable<CommentCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutPostInput = {
    rating: number
    user: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutPostInput = {
    id?: number
    rating: number
    userId: number
  }

  export type ReviewCreateOrConnectWithoutPostInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutPostInput, ReviewUncheckedCreateWithoutPostInput>
  }

  export type ReviewCreateManyPostInputEnvelope = {
    data: Enumerable<ReviewCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutPostsInput = {
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipCreateNestedManyWithoutRespondentInput
    comments?: CommentCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    memberships?: MembershipCreateNestedManyWithoutUserInput
    PostM?: PostMCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostsInput = {
    id?: number
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardUncheckedCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipUncheckedCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipUncheckedCreateNestedManyWithoutRespondentInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    memberships?: MembershipUncheckedCreateNestedManyWithoutUserInput
    PostM?: PostMUncheckedCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
  }

  export type CommentUpdateManyWithWhereWithoutPostInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentsInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutPostInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutPostInput, ReviewUncheckedUpdateWithoutPostInput>
    create: XOR<ReviewCreateWithoutPostInput, ReviewUncheckedCreateWithoutPostInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutPostInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutPostInput, ReviewUncheckedUpdateWithoutPostInput>
  }

  export type ReviewUpdateManyWithWhereWithoutPostInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutReviewsInput>
  }

  export type UserUpsertWithoutPostsInput = {
    update: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type UserUpdateWithoutPostsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUpdateManyWithoutRespondentNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    memberships?: MembershipUpdateManyWithoutUserNestedInput
    PostM?: PostMUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUncheckedUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUncheckedUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUncheckedUpdateManyWithoutRespondentNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    memberships?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    PostM?: PostMUncheckedUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostCreateWithoutCommentsInput = {
    image: string
    title: string
    skill: string
    desc: string
    likes: number
    reviews?: ReviewCreateNestedManyWithoutPostInput
    user: UserCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutCommentsInput = {
    id?: number
    image: string
    title: string
    skill: string
    desc: string
    likes: number
    userId: number
    reviews?: ReviewUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutCommentsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipCreateNestedManyWithoutRespondentInput
    posts?: PostCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    memberships?: MembershipCreateNestedManyWithoutUserInput
    PostM?: PostMCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: number
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardUncheckedCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipUncheckedCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipUncheckedCreateNestedManyWithoutRespondentInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    memberships?: MembershipUncheckedCreateNestedManyWithoutUserInput
    PostM?: PostMUncheckedCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type PostUpsertWithoutCommentsInput = {
    update: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
  }

  export type PostUpdateWithoutCommentsInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUpdateManyWithoutPostNestedInput
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUpdateManyWithoutRespondentNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    memberships?: MembershipUpdateManyWithoutUserNestedInput
    PostM?: PostMUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUncheckedUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUncheckedUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUncheckedUpdateManyWithoutRespondentNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    memberships?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    PostM?: PostMUncheckedUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostCreateWithoutReviewsInput = {
    image: string
    title: string
    skill: string
    desc: string
    likes: number
    comments?: CommentCreateNestedManyWithoutPostInput
    user: UserCreateNestedOneWithoutPostsInput
  }

  export type PostUncheckedCreateWithoutReviewsInput = {
    id?: number
    image: string
    title: string
    skill: string
    desc: string
    likes: number
    userId: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutReviewsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutReviewsInput, PostUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutReviewsInput = {
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipCreateNestedManyWithoutRespondentInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    memberships?: MembershipCreateNestedManyWithoutUserInput
    PostM?: PostMCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: number
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardUncheckedCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipUncheckedCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipUncheckedCreateNestedManyWithoutRespondentInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    memberships?: MembershipUncheckedCreateNestedManyWithoutUserInput
    PostM?: PostMUncheckedCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type PostUpsertWithoutReviewsInput = {
    update: XOR<PostUpdateWithoutReviewsInput, PostUncheckedUpdateWithoutReviewsInput>
    create: XOR<PostCreateWithoutReviewsInput, PostUncheckedCreateWithoutReviewsInput>
  }

  export type PostUpdateWithoutReviewsInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    comments?: CommentUpdateManyWithoutPostNestedInput
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUpdateManyWithoutRespondentNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    memberships?: MembershipUpdateManyWithoutUserNestedInput
    PostM?: PostMUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUncheckedUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUncheckedUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUncheckedUpdateManyWithoutRespondentNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    memberships?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    PostM?: PostMUncheckedUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSentRequestsInput = {
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardCreateNestedManyWithoutUserInput
    receivedRequests?: FriendshipCreateNestedManyWithoutRespondentInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    memberships?: MembershipCreateNestedManyWithoutUserInput
    PostM?: PostMCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentRequestsInput = {
    id?: number
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardUncheckedCreateNestedManyWithoutUserInput
    receivedRequests?: FriendshipUncheckedCreateNestedManyWithoutRespondentInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    memberships?: MembershipUncheckedCreateNestedManyWithoutUserInput
    PostM?: PostMUncheckedCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentRequestsInput, UserUncheckedCreateWithoutSentRequestsInput>
  }

  export type UserCreateWithoutReceivedRequestsInput = {
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipCreateNestedManyWithoutRequestorInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    memberships?: MembershipCreateNestedManyWithoutUserInput
    PostM?: PostMCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedRequestsInput = {
    id?: number
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardUncheckedCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipUncheckedCreateNestedManyWithoutRequestorInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    memberships?: MembershipUncheckedCreateNestedManyWithoutUserInput
    PostM?: PostMUncheckedCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedRequestsInput, UserUncheckedCreateWithoutReceivedRequestsInput>
  }

  export type UserUpsertWithoutSentRequestsInput = {
    update: XOR<UserUpdateWithoutSentRequestsInput, UserUncheckedUpdateWithoutSentRequestsInput>
    create: XOR<UserCreateWithoutSentRequestsInput, UserUncheckedCreateWithoutSentRequestsInput>
  }

  export type UserUpdateWithoutSentRequestsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUpdateManyWithoutUserNestedInput
    receivedRequests?: FriendshipUpdateManyWithoutRespondentNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    memberships?: MembershipUpdateManyWithoutUserNestedInput
    PostM?: PostMUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUncheckedUpdateManyWithoutUserNestedInput
    receivedRequests?: FriendshipUncheckedUpdateManyWithoutRespondentNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    memberships?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    PostM?: PostMUncheckedUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutReceivedRequestsInput = {
    update: XOR<UserUpdateWithoutReceivedRequestsInput, UserUncheckedUpdateWithoutReceivedRequestsInput>
    create: XOR<UserCreateWithoutReceivedRequestsInput, UserUncheckedCreateWithoutReceivedRequestsInput>
  }

  export type UserUpdateWithoutReceivedRequestsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUpdateManyWithoutRequestorNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    memberships?: MembershipUpdateManyWithoutUserNestedInput
    PostM?: PostMUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUncheckedUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUncheckedUpdateManyWithoutRequestorNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    memberships?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    PostM?: PostMUncheckedUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutMembershipsInput = {
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipCreateNestedManyWithoutRespondentInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    PostM?: PostMCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMembershipsInput = {
    id?: number
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardUncheckedCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipUncheckedCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipUncheckedCreateNestedManyWithoutRespondentInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    PostM?: PostMUncheckedCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMembershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMembershipsInput, UserUncheckedCreateWithoutMembershipsInput>
  }

  export type CommunityCreateWithoutMembershipsInput = {
    name: string
    skill: string
  }

  export type CommunityUncheckedCreateWithoutMembershipsInput = {
    id?: number
    name: string
    skill: string
  }

  export type CommunityCreateOrConnectWithoutMembershipsInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutMembershipsInput, CommunityUncheckedCreateWithoutMembershipsInput>
  }

  export type UserUpsertWithoutMembershipsInput = {
    update: XOR<UserUpdateWithoutMembershipsInput, UserUncheckedUpdateWithoutMembershipsInput>
    create: XOR<UserCreateWithoutMembershipsInput, UserUncheckedCreateWithoutMembershipsInput>
  }

  export type UserUpdateWithoutMembershipsInput = {
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUpdateManyWithoutRespondentNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    PostM?: PostMUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMembershipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUncheckedUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUncheckedUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUncheckedUpdateManyWithoutRespondentNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    PostM?: PostMUncheckedUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommunityUpsertWithoutMembershipsInput = {
    update: XOR<CommunityUpdateWithoutMembershipsInput, CommunityUncheckedUpdateWithoutMembershipsInput>
    create: XOR<CommunityCreateWithoutMembershipsInput, CommunityUncheckedCreateWithoutMembershipsInput>
  }

  export type CommunityUpdateWithoutMembershipsInput = {
    name?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
  }

  export type CommunityUncheckedUpdateWithoutMembershipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewMCreateWithoutPostInput = {
    comment: string
    rating: number
    user: UserCreateNestedOneWithoutReviewMInput
  }

  export type ReviewMUncheckedCreateWithoutPostInput = {
    id?: number
    comment: string
    rating: number
    userId: number
  }

  export type ReviewMCreateOrConnectWithoutPostInput = {
    where: ReviewMWhereUniqueInput
    create: XOR<ReviewMCreateWithoutPostInput, ReviewMUncheckedCreateWithoutPostInput>
  }

  export type ReviewMCreateManyPostInputEnvelope = {
    data: Enumerable<ReviewMCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutPostMInput = {
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipCreateNestedManyWithoutRespondentInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    memberships?: MembershipCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostMInput = {
    id?: number
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardUncheckedCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipUncheckedCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipUncheckedCreateNestedManyWithoutRespondentInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    memberships?: MembershipUncheckedCreateNestedManyWithoutUserInput
    ReviewM?: ReviewMUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostMInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostMInput, UserUncheckedCreateWithoutPostMInput>
  }

  export type ReviewMUpsertWithWhereUniqueWithoutPostInput = {
    where: ReviewMWhereUniqueInput
    update: XOR<ReviewMUpdateWithoutPostInput, ReviewMUncheckedUpdateWithoutPostInput>
    create: XOR<ReviewMCreateWithoutPostInput, ReviewMUncheckedCreateWithoutPostInput>
  }

  export type ReviewMUpdateWithWhereUniqueWithoutPostInput = {
    where: ReviewMWhereUniqueInput
    data: XOR<ReviewMUpdateWithoutPostInput, ReviewMUncheckedUpdateWithoutPostInput>
  }

  export type ReviewMUpdateManyWithWhereWithoutPostInput = {
    where: ReviewMScalarWhereInput
    data: XOR<ReviewMUpdateManyMutationInput, ReviewMUncheckedUpdateManyWithoutReviewsInput>
  }

  export type UserUpsertWithoutPostMInput = {
    update: XOR<UserUpdateWithoutPostMInput, UserUncheckedUpdateWithoutPostMInput>
    create: XOR<UserCreateWithoutPostMInput, UserUncheckedCreateWithoutPostMInput>
  }

  export type UserUpdateWithoutPostMInput = {
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUpdateManyWithoutRespondentNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    memberships?: MembershipUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostMInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUncheckedUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUncheckedUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUncheckedUpdateManyWithoutRespondentNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    memberships?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    ReviewM?: ReviewMUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostMCreateWithoutReviewsInput = {
    title: string
    price: number
    image?: PostMCreateimageInput | Enumerable<string>
    description: string
    skill: string
    user: UserCreateNestedOneWithoutPostMInput
  }

  export type PostMUncheckedCreateWithoutReviewsInput = {
    id?: number
    title: string
    price: number
    image?: PostMCreateimageInput | Enumerable<string>
    description: string
    skill: string
    userId: number
  }

  export type PostMCreateOrConnectWithoutReviewsInput = {
    where: PostMWhereUniqueInput
    create: XOR<PostMCreateWithoutReviewsInput, PostMUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutReviewMInput = {
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipCreateNestedManyWithoutRespondentInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    reviews?: ReviewCreateNestedManyWithoutUserInput
    memberships?: MembershipCreateNestedManyWithoutUserInput
    PostM?: PostMCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReviewMInput = {
    id?: number
    uid: string
    name: string
    email: string
    address: string
    profileImage?: string | null
    budge?: string | null
    points?: number
    age: number
    skills?: UserCreateskillsInput | Enumerable<string>
    hobbies?: UserCreatehobbiesInput | Enumerable<string>
    details?: string | null
    descriptions?: string | null
    phoneNumber?: string | null
    gender?: string | null
    level: number
    createdAt?: Date | string
    isBanned?: boolean
    isAdmin?: boolean
    cards?: CardUncheckedCreateNestedManyWithoutUserInput
    sentRequests?: FriendshipUncheckedCreateNestedManyWithoutRequestorInput
    receivedRequests?: FriendshipUncheckedCreateNestedManyWithoutRespondentInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
    memberships?: MembershipUncheckedCreateNestedManyWithoutUserInput
    PostM?: PostMUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReviewMInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewMInput, UserUncheckedCreateWithoutReviewMInput>
  }

  export type PostMUpsertWithoutReviewsInput = {
    update: XOR<PostMUpdateWithoutReviewsInput, PostMUncheckedUpdateWithoutReviewsInput>
    create: XOR<PostMCreateWithoutReviewsInput, PostMUncheckedCreateWithoutReviewsInput>
  }

  export type PostMUpdateWithoutReviewsInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: PostMUpdateimageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutPostMNestedInput
  }

  export type PostMUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: PostMUpdateimageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutReviewMInput = {
    update: XOR<UserUpdateWithoutReviewMInput, UserUncheckedUpdateWithoutReviewMInput>
    create: XOR<UserCreateWithoutReviewMInput, UserUncheckedCreateWithoutReviewMInput>
  }

  export type UserUpdateWithoutReviewMInput = {
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUpdateManyWithoutRespondentNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    reviews?: ReviewUpdateManyWithoutUserNestedInput
    memberships?: MembershipUpdateManyWithoutUserNestedInput
    PostM?: PostMUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewMInput = {
    id?: IntFieldUpdateOperationsInput | number
    uid?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    budge?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    age?: IntFieldUpdateOperationsInput | number
    skills?: UserUpdateskillsInput | Enumerable<string>
    hobbies?: UserUpdatehobbiesInput | Enumerable<string>
    details?: NullableStringFieldUpdateOperationsInput | string | null
    descriptions?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    level?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isBanned?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUncheckedUpdateManyWithoutUserNestedInput
    sentRequests?: FriendshipUncheckedUpdateManyWithoutRequestorNestedInput
    receivedRequests?: FriendshipUncheckedUpdateManyWithoutRespondentNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    memberships?: MembershipUncheckedUpdateManyWithoutUserNestedInput
    PostM?: PostMUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CardCreateManyUserInput = {
    id?: number
    last4: string
    brand: string
    expiration: string
    paymentMethodId?: string | null
  }

  export type FriendshipCreateManyRequestorInput = {
    id?: number
    respondentId: number
    status?: FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendshipCreateManyRespondentInput = {
    id?: number
    requestorId: number
    status?: FriendshipStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostCreateManyUserInput = {
    id?: number
    image: string
    title: string
    skill: string
    desc: string
    likes: number
  }

  export type CommentCreateManyUserInput = {
    id?: number
    text: string
    postId: number
  }

  export type ReviewCreateManyUserInput = {
    id?: number
    rating: number
    postId: number
  }

  export type MembershipCreateManyUserInput = {
    id?: number
    communityId: number
    isAdmin?: boolean
    isAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostMCreateManyUserInput = {
    id?: number
    title: string
    price: number
    image?: PostMCreateimageInput | Enumerable<string>
    description: string
    skill: string
  }

  export type ReviewMCreateManyUserInput = {
    id?: number
    comment: string
    rating: number
    postId: number
  }

  export type CardUpdateWithoutUserInput = {
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CardUncheckedUpdateManyWithoutCardsInput = {
    id?: IntFieldUpdateOperationsInput | number
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    expiration?: StringFieldUpdateOperationsInput | string
    paymentMethodId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FriendshipUpdateWithoutRequestorInput = {
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    respondent?: UserUpdateOneRequiredWithoutReceivedRequestsNestedInput
  }

  export type FriendshipUncheckedUpdateWithoutRequestorInput = {
    id?: IntFieldUpdateOperationsInput | number
    respondentId?: IntFieldUpdateOperationsInput | number
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipUncheckedUpdateManyWithoutSentRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    respondentId?: IntFieldUpdateOperationsInput | number
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipUpdateWithoutRespondentInput = {
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestor?: UserUpdateOneRequiredWithoutSentRequestsNestedInput
  }

  export type FriendshipUncheckedUpdateWithoutRespondentInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestorId?: IntFieldUpdateOperationsInput | number
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendshipUncheckedUpdateManyWithoutReceivedRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestorId?: IntFieldUpdateOperationsInput | number
    status?: EnumFriendshipStatusFieldUpdateOperationsInput | FriendshipStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUpdateWithoutUserInput = {
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    comments?: CommentUpdateManyWithoutPostNestedInput
    reviews?: ReviewUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutUserInput = {
    text?: StringFieldUpdateOperationsInput | string
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUncheckedUpdateManyWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUpdateWithoutUserInput = {
    rating?: IntFieldUpdateOperationsInput | number
    post?: PostUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUncheckedUpdateManyWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type MembershipUpdateWithoutUserInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    community?: CommunityUpdateOneRequiredWithoutMembershipsNestedInput
  }

  export type MembershipUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    communityId?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MembershipUncheckedUpdateManyWithoutMembershipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    communityId?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostMUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: PostMUpdateimageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    reviews?: ReviewMUpdateManyWithoutPostNestedInput
  }

  export type PostMUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: PostMUpdateimageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
    reviews?: ReviewMUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostMUncheckedUpdateManyWithoutPostMInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    image?: PostMUpdateimageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    skill?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewMUpdateWithoutUserInput = {
    comment?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    post?: PostMUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewMUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewMUncheckedUpdateManyWithoutReviewMInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
  }

  export type MembershipCreateManyCommunityInput = {
    id?: number
    userId: number
    isAdmin?: boolean
    isAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MembershipUpdateWithoutCommunityInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMembershipsNestedInput
  }

  export type MembershipUncheckedUpdateWithoutCommunityInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyPostInput = {
    id?: number
    text: string
    userId: number
  }

  export type ReviewCreateManyPostInput = {
    id?: number
    rating: number
    userId: number
  }

  export type CommentUpdateWithoutPostInput = {
    text?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUpdateWithoutPostInput = {
    rating?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewMCreateManyPostInput = {
    id?: number
    comment: string
    rating: number
    userId: number
  }

  export type ReviewMUpdateWithoutPostInput = {
    comment?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutReviewMNestedInput
  }

  export type ReviewMUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewMUncheckedUpdateManyWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}